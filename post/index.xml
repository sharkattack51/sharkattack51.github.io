<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dokyuments</title>
    <link>https://sharkattack51.github.io/post/</link>
    <description>Recent content in Posts on Dokyuments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
    
    
    <lastBuildDate>Fri, 31 Jul 2015 19:12:20 JST</lastBuildDate>
    <atom:link href="https://sharkattack51.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OSC for Unity</title>
      <link>https://sharkattack51.github.io/post/osc/</link>
      <pubDate>Fri, 31 Jul 2015 19:12:20 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/osc/</guid>
      <description>

&lt;p&gt;ちょっと使う機会が出来たらそのうち触っておこうと思っていたOSC周りのライブラリをいろいろ漁ってみていた。
今回、正確にはTUIOを使う要件だったが、良い機会だったので下レイヤーで動いてるOSCを理解しておこうと思った。&lt;/p&gt;

&lt;h2 id=&#34;osc-tuio:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OSC/TUIO&lt;/h2&gt;

&lt;h4 id=&#34;opensound-control-osc:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OpenSound Control (OSC)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/OpenSound_Control&#34;&gt;https://ja.wikipedia.org/wiki/OpenSound_Control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSCはUDP通信上のフォーマット仕様。TUIOはさらにOSCを利用してタッチ入力用に取り決められた標準仕様という理解。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ちなみにWindowsタッチイベントはハードウェアベンダー以外の開発者が、自由にタッチイベントを発行できなかったと思うので、そんな場合もTUIOが有効。
マルチプラットフォーム対応のタッチ開発環境には同じ仕組みで対応できるのでそちらでも有用。
最近ではTouchScriptが全方位カバーされているのでおすすめ。
&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/7394&#34;&gt;https://www.assetstore.unity3d.com/jp/#!/content/7394&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UDPを使ったソケット通信自体は過去何度も経験があったけど、
バイナリデータでやり取りしてたり、パースを毎回自前でやってたりして大分不毛だった。
3つの違う言語で同じバイナリパース処理を書いたことある。&lt;/p&gt;

&lt;h2 id=&#34;メリットとか特徴とか:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;メリットとか特徴とか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;言語ごとにライブラリが存在するので通信処理とデータ解析処理を自前でやらなくて良い&lt;/li&gt;
&lt;li&gt;値にアクセスするためのURIっぽい構造化されたOSCアドレスが素敵&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;oscライブラリ:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OSCライブラリ&lt;/h2&gt;

&lt;p&gt;OSCのライブラリをいろいろ調べていてどれもいまいち使いにくい印象だった。
どのライブラリも受信データの分解まではやってくれるけど、受信データにもっと直ぐに、もっと簡単に、アクセスしたかった。あと汎用的に。&lt;/p&gt;

&lt;p&gt;その中でこれが良い気がした。OSCアドレス指定で受信毎のコールバックが設定できる。&lt;/p&gt;

&lt;h4 id=&#34;rug-osc:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;Rug.Osc&lt;/h4&gt;

&lt;p&gt;Simple, complete, open source OSC implementation for .NET and Mono.
&lt;a href=&#34;https://bitbucket.org/rugcode/rug.osc/overview&#34;&gt;https://bitbucket.org/rugcode/rug.osc/overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その上で、もうすこしUnityフレンドリーな感じで受信側のラッパークラス書いた。&lt;/p&gt;

&lt;h4 id=&#34;unity-oscreceivecontroller:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;Unity-OscReceiveController&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sharkattack51/Unity-OscReceiveController&#34;&gt;https://github.com/sharkattack51/Unity-OscReceiveController&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;受信の値をインスペクタで確認できるようにpublic変数でやってる。
ソースファイルを増やしたくないのでインスペクタ拡張のEditorスクリプトはわりかし作らない主義です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WinIMEパネルとRemoteDesktop-Mac</title>
      <link>https://sharkattack51.github.io/post/win_ime_panel/</link>
      <pubDate>Sat, 18 Jul 2015 22:02:30 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/win_ime_panel/</guid>
      <description>

&lt;p&gt;WinのIMEパネル表示させたくないのでいつも消しているが、
MacからRemoteDesktop使っている時に&lt;code&gt;英数/かな&lt;/code&gt;の切り替えがキーボード操作で出来なくて、
このパネルが必要になって困る。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;ime_panel.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;常時これは絶対に表示したくないし、なんとか環境に依存しない方法で解決したい。
(IMEの設定いじったり、キーマップを変えたりするのはPC環境が変わった場合に面倒なのでやらない)&lt;/p&gt;

&lt;p&gt;結果、完全解決出来なかったので、着地点を設定変更までの手数を減らすということにした。&lt;/p&gt;

&lt;h3 id=&#34;通常:f0add05a456f3f2815ef00db948f079c&#34;&gt;通常&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;コンパネを開く&lt;/li&gt;
&lt;li&gt;コンパネから地域と言語を開く&lt;/li&gt;
&lt;li&gt;地域と言語からキーボードと言語タブを開く&lt;/li&gt;
&lt;li&gt;キーボードの変更ボタンを押す&lt;/li&gt;
&lt;li&gt;テキストサービスと入力言語ウィンドウを開く&lt;/li&gt;
&lt;li&gt;言語バータブを開く&lt;/li&gt;
&lt;li&gt;言語バー設定の変更&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;手数が多すぎてやばい&lt;/p&gt;

&lt;h3 id=&#34;アイディア:f0add05a456f3f2815ef00db948f079c&#34;&gt;アイディア&lt;/h3&gt;

&lt;p&gt;上記 1. 2. 3. 4. をショートカットするコマンド&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ control input.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;コントロールパネル内の設定ウィンドウを直接開く。
&lt;code&gt;.bat&lt;/code&gt;作って設定ウィンドウopenまでショートカットする。
入力を切り替えたい時に初めてパネル表示させて、要件終わったら非表示にする。&lt;/p&gt;

&lt;p&gt;あと２クリックをショートカットできたら、、、、、、、、、、、、、、&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtualbox上のCentOSのディスク容量を追加する</title>
      <link>https://sharkattack51.github.io/post/virtualbox_add_disk/</link>
      <pubDate>Thu, 02 Jul 2015 20:00:00 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/virtualbox_add_disk/</guid>
      <description>&lt;p&gt;VMで動かしていたCentOSが容量一杯になってしまったので緊急調べた。&lt;br/&gt;
基本的には下記のどっちかでなんとかなる。ほんとWeb無かったらなんも分からないです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.clock-up.jp/entry/2015/05/03/virtualbox-centos-disk-ext&#34;&gt;http://blog.clock-up.jp/entry/2015/05/03/virtualbox-centos-disk-ext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.clock-up.jp/entry/2015/05/29/virtualbox-centos-disk-vdi-ext&#34;&gt;http://blog.clock-up.jp/entry/2015/05/29/virtualbox-centos-disk-vdi-ext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;簡単なのは物理ディスクを追加するやり方。Virtualbox上から追加する。&lt;br/&gt;
追加したら&lt;code&gt;$ fdisk /dev/sda&lt;/code&gt;とか&lt;code&gt;$ fdisk /dev/sdb&lt;/code&gt;でパーティション設定してやる。&lt;/p&gt;

&lt;p&gt;ここは&lt;code&gt;m&lt;/code&gt;コマンドでヘルプを確認しながらやるべき。&lt;br/&gt;
&lt;code&gt;4&lt;/code&gt;まで使える&lt;code&gt;primaryパーティション&lt;/code&gt;を設定してやる。&lt;br/&gt;
テーブルの開始位置と終わりの位置を設定するが、基本はデフォルトでやれば追加容量分を全部使う感じ。&lt;/p&gt;

&lt;p&gt;追加できたら再起動 &lt;code&gt;$ shutdown -r now&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;その後、&lt;br/&gt;
&lt;code&gt;$ fdisk -l&lt;/code&gt;で追加したパーティションを確認する。追加できているがまだ使えない。&lt;br/&gt;
&lt;code&gt;$ pvcreate /dev/sda3&lt;/code&gt;でパーティションに物理ボリュームを作り、&lt;br/&gt;
&lt;code&gt;$ vgextend VolGroup /dev/sda3&lt;/code&gt;でボリュームグループの設定し、&lt;br/&gt;
&lt;code&gt;$ lvextend -l +100%FREE /dev/mapper/VolGroup-lv_root&lt;/code&gt;でボリューム拡張して、&lt;br/&gt;
&lt;code&gt;$ resize2fs /dev/mapper/VolGroup-lv_root&lt;/code&gt;でファイルシステムを拡張する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ df&lt;/code&gt;でディスク確認してみると拡張出来ている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReactiveProgrammingに関する参照情報</title>
      <link>https://sharkattack51.github.io/post/reactive_reference/</link>
      <pubDate>Wed, 01 Jul 2015 17:41:17 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/reactive_reference/</guid>
      <description>&lt;p&gt;まず一回ここら辺を適当に読み漁って概要をなんとなく拾う。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【翻訳】あなたが求めていたリアクティブプログラミング入門&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ninjinkun.hatenablog.com/entry/introrxja&#34;&gt;http://ninjinkun.hatenablog.com/entry/introrxja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactive Porn&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://steps.dodgson.org/b/2014/12/07/reactive-porn/&#34;&gt;http://steps.dodgson.org/b/2014/12/07/reactive-porn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なぜリアクティブプログラミングは重要か。&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://d.hatena.ne.jp/pokarim/20101226&#34;&gt;http://d.hatena.ne.jp/pokarim/20101226&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactive Programming in Javascript&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ahomu.github.io/s/150221-frontrend_conference/#1&#34;&gt;http://ahomu.github.io/s/150221-frontrend_conference/#1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;スマートフォンアプリでリアクティブプログラミングをしているが、Promiseとデータバインディングとして使っている&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ninjinkun.hatenablog.com/entry/2015/03/21/143712&#34;&gt;http://ninjinkun.hatenablog.com/entry/2015/03/21/143712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android開発でRxJavaをチームに導入した話&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://techlife.cookpad.com/entry/2015/04/17/100000&#34;&gt;http://techlife.cookpad.com/entry/2015/04/17/100000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RxJSをもくもくしてReactivePropertyの価値らしきものを気づかされた話（仮）&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://saneyukis.hatenablog.com/entry/2015/05/12/125317&#34;&gt;http://saneyukis.hatenablog.com/entry/2015/05/12/125317&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未来のプログラミング技術をUnityで -UniRx-&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/torisoup/unity-unirx&#34;&gt;http://www.slideshare.net/torisoup/unity-unirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UniRxとカスタムバインディング&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ykimisaki.hatenablog.jp/entry/2015/03/25/012436&#34;&gt;http://ykimisaki.hatenablog.jp/entry/2015/03/25/012436&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observable Everywhere - Rxの原則とUniRxにみるデータソースの見つけ方&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/neuecc/observable-everywhere-rxuni-rx&#34;&gt;http://www.slideshare.net/neuecc/observable-everywhere-rxuni-rx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、雰囲気を把握したらなんでも良いのでRxライブラリを一回触ってみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C# / &lt;strong&gt;ReactiveExtentions&lt;/strong&gt; &lt;a href=&#34;https://rx.codeplex.com&#34;&gt;https://rx.codeplex.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unity / &lt;strong&gt;UniRx&lt;/strong&gt; &lt;a href=&#34;https://github.com/neuecc/UniRx&#34;&gt;https://github.com/neuecc/UniRx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python / &lt;strong&gt;RxPY&lt;/strong&gt; &lt;a href=&#34;https://github.com/ReactiveX/RxPY&#34;&gt;https://github.com/ReactiveX/RxPY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AS3 / &lt;strong&gt;Raix&lt;/strong&gt; &lt;a href=&#34;https://github.com/richardszalay/raix&#34;&gt;https://github.com/richardszalay/raix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ライブラリのドキュメント読んで、触りだけでもやったらこれ読んで大体機能を把握する。神資料。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactiveExtentions入門&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/okazuki0130/reactive-extensionsv01&#34;&gt;http://www.slideshare.net/okazuki0130/reactive-extensionsv01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その後、UniRx勉強会のスライド見直してまとめ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;はじめてのUniRx&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/torisoup/uni-rx&#34;&gt;http://www.slideshare.net/torisoup/uni-rx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interactive UI with UniRx&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/yutoiwashita/reactive-ui-withunirx&#34;&gt;http://www.slideshare.net/yutoiwashita/reactive-ui-withunirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;History &amp;amp; Practices for UniRx UniRxの歴史、或いは開発(中)タイトルの用例と落とし穴の回避法&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/neuecc/history-practices-for-unirx-unirx&#34;&gt;http://www.slideshare.net/neuecc/history-practices-for-unirx-unirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、この後に上の方の資料を見直すと大分理解が深まる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>as3 レスポンスヘッダーが取得できない</title>
      <link>https://sharkattack51.github.io/post/as3_get_response_header/</link>
      <pubDate>Tue, 09 Jun 2015 21:36:28 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/as3_get_response_header/</guid>
      <description>&lt;p&gt;as3でサーバーからのレスポンスヘッダーを取りたかった。&lt;br/&gt;
どうやらflash上ではできないらしい。&lt;br/&gt;
マジと思って調べたらマジだった。みんなこれでやってたのか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTPStatusEvent&lt;/code&gt;クラスで取れる気がしたが、
リファレンスをよく見ると&lt;code&gt;responseHeaders&lt;/code&gt;プロパティ自体のランタイム表記にFlashPlayerが密かに無い。&lt;/p&gt;

&lt;p&gt;その後少しがんばって、こことか発見して&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.livedoor.jp/kunz/archives/51364315.html&#34;&gt;http://blog.livedoor.jp/kunz/archives/51364315.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使ったら取得できた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/wbpanda/20091007/1254931878&#34;&gt;http://d.hatena.ne.jp/wbpanda/20091007/1254931878&lt;/a&gt;
&lt;a href=&#34;https://github.com/gabriel/as3httpclient&#34;&gt;https://github.com/gabriel/as3httpclient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;と思ったらローカルサーバーだとできてて、web経由だと取得できなかった。&lt;br/&gt;
これはつまりおそらく無理でflashplayerのセキュリティポリシー的なやつかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonと連携する方法</title>
      <link>https://sharkattack51.github.io/post/cs_py/</link>
      <pubDate>Sat, 23 May 2015 11:13:29 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/cs_py/</guid>
      <description>

&lt;p&gt;Pythonライブラリの有能さを覚えると、外の言語を使っている時にPythonでサクッといきたい場面がある。
もちろん実行時の処理速度に問題がなければという前提で、非同期で処理できればメインとは別のプロセスで処理できるので受けれる恩恵は大きい。&lt;/p&gt;

&lt;p&gt;例えば画像の変換の場合は&lt;a href=&#34;http://www.pythonware.com/products/pil/&#34;&gt;PIL&lt;/a&gt;なんか使うと相当楽だし、場合によっては&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt;ラッパーが使える。(もちろんネイティブライブラリよりは遅い)&lt;br/&gt;
RSSなんかのFeedのパースなんかも&lt;a href=&#34;https://pypi.python.org/pypi/feedparser&#34;&gt;UniversalFeedParser&lt;/a&gt;が有能すぎるし、&lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt;は便利だ。&lt;/p&gt;

&lt;p&gt;例えばUnityやAIRなどの実行環境からPythonに処理を投げたい場合にどうするか。
データの受け渡しはどうするか。&lt;/p&gt;

&lt;h1 id=&#34;方法:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;方法&lt;/h1&gt;

&lt;p&gt;基本的にはイベント処理で実装したいので、Python側をローカルにアプリケーションサーバーとして立てておき、メインアプリ側からhttpリクエストを送る。&lt;/p&gt;

&lt;p&gt;できるだけシンプルに実装したいのでWebフレームワークを使ってアプリケーションサーバーを立てる。
&lt;a href=&#34;http://a2c.bitbucket.org/flask/&#34;&gt;flask&lt;/a&gt;や&lt;a href=&#34;http://bottlepy.org/docs/dev/index.html&#34;&gt;Bottle&lt;/a&gt;あたりが良いと思う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;# python

from flask import Flask

app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;, methods=[&#39;GET&#39;])
def index():
	return &amp;quot;Hello&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
	app.debug = True
	app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでルート &lt;a href=&#34;http://localhost:5000/&#34;&gt;http://localhost:5000/&lt;/a&gt; にアクセスすると結果をとってこれる。
あとはhttpリクエストで非同期処理してメインアプリ側でイベント処理する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C# Python側からテキストを受け取る

IEnumerator Start()
{
	WWW www = new WWW(&amp;quot;http://localhost:5000/&amp;quot;);

	yield return www;

	Debug.log(www.text) //Hello
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数が欲しい場合は、クエリやRESTのAPIを生やして対応できるし、
画像の受け渡しが必要な場合はbyte配列にした上でformでやり取りする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C#

IEnumerator Start()
{
	WWWForm form = new WWWForm();
	form.AddBinaryData(&amp;quot;post_data&amp;quot;, texture.EncodeToPNG(), texture.name, &amp;quot;image/png&amp;quot;);
	WWW www = new WWW(&amp;quot;http://localhost:5000/test_api&amp;quot;, form);

	yield return www;

	processedTex = www.texture;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# python PILを使った画像処理結果をC#側に返す

@app.route(&amp;quot;/test_api&amp;quot;, methods=[&amp;quot;POST&amp;quot;])
def test():
	if request.method == &amp;quot;POST&amp;quot;:

		# formデータの受け取り
		image_bytes = request.files[&amp;quot;post_data&amp;quot;]

		# IOオブジェクトでbyteデータをImageに読み込む
		image = Image.open(StringIO(image_bytes.read()))
		
		# imageに対して加工処理
		# ...
		
		# 更新をbufferにpngで保存
		buf = StringIO()
		image.save(buf, &amp;quot;png&amp;quot;)

		# bufferからレスポンス作成
		response = make_response(buf.getvalue())
		response.headers[&amp;quot;Content-type&amp;quot;] = &amp;quot;Image&amp;quot;
		return response
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;アプリケーションの実装はこまごました部分をスクリプト側に委譲していく設計もありだと思う。&lt;br/&gt;
俗にいう&lt;a href=&#34;http://deeeet.com/writing/2014/09/10/microservices/&#34;&gt;Microservices&lt;/a&gt;の一つではないか。&lt;/p&gt;

&lt;p&gt;ちなみにUnityであればこういう手もある。&lt;br/&gt;
&lt;a href=&#34;http://tkitao.hatenablog.com/entry/2015/05/18/225902&#34;&gt;Unity上でPythonを使う①【アセット組み込み編】 - kitao&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>logrotate</title>
      <link>https://sharkattack51.github.io/post/logrotate/</link>
      <pubDate>Thu, 14 May 2015 22:11:58 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/logrotate/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install logrotate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;logrotate&lt;/code&gt;はデーモンではないので&lt;code&gt;crond&lt;/code&gt;によって実行される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/cron.daily/logrotate&lt;/code&gt;により
メイン設定ファイルの&lt;code&gt;/etc/logrotate.conf&lt;/code&gt;が読み込まれる。&lt;/p&gt;

&lt;p&gt;メイン設定ファイル内のincludeにより
個別設定ファイルの&lt;code&gt;/etc/logrotate.d/&lt;/code&gt;以下が読み込まれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/logrotate.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;サービスごとの設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/logrotate.d/xxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;こちらが優先される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ローテーション確認:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;ローテーション確認&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -d /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;強制実行:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;強制実行&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -f /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;実行履歴確認:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;実行履歴確認&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /var/lib/logrotate.status
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;やりたかったこと:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;やりたかったこと&lt;/h1&gt;

&lt;p&gt;httpdのローテーション設定を変更したかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/logrotate.d/httpd&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;週ごとのローテーション設定と、世代保存53週(1年)を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	weekly
	rotate 53
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;動作確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -dv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;vオプションで詳細を表示、個別設定ファイルの場合はメイン設定は使用されない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エラーが出ていた。remove対象のファイルがnot found。ふぁ？？？&lt;/p&gt;

&lt;p&gt;vオプションで詳細をよく確認すると、ファイル名処理を日付ではなく連番のextentionで処理しているっぽい？
現状は&lt;code&gt;/var/log/httpd&lt;/code&gt;内には日付ファイル名が存在。&lt;/p&gt;

&lt;p&gt;メイン設定ファイル内に&lt;code&gt;dateext&lt;/code&gt;という項目を発見。個別設定の方に追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	weekly
	rotate 53
	dateext
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -dv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけてるっぽいので実行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -fv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログフォルダ確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと消えてた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>マウスの強制操作</title>
      <link>https://sharkattack51.github.io/post/mouse_emulation/</link>
      <pubDate>Sun, 10 May 2015 12:06:21 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/mouse_emulation/</guid>
      <description>

&lt;p&gt;Win環境(WPF)でマウスの強制操作に関してハマった場合の対応方法。何故。&lt;/p&gt;

&lt;h1 id=&#34;方法1:046002245d2b3b653a986c98e88234bb&#34;&gt;方法1&lt;/h1&gt;

&lt;p&gt;今まではここら辺を参考にしていた。
&lt;a href=&#34;http://homepage2.nifty.com/nonnon/SoftSample/CS.NET/SampleSendInput.html&#34;&gt;http://homepage2.nifty.com/nonnon/SoftSample/CS.NET/SampleSendInput.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;user32.dllからアンマネージdll関数のSendInput()でエミュレート操作データを作って送出。実行。&lt;/p&gt;

&lt;p&gt;で、今回WPF環境で使おうとしたら動かなくて何故なのかー。&lt;/p&gt;

&lt;h1 id=&#34;方法2:046002245d2b3b653a986c98e88234bb&#34;&gt;方法2&lt;/h1&gt;

&lt;p&gt;調べた結果、こっちの方法を参考にしたらいけた。ていうかまんま。
&lt;a href=&#34;http://puarts.com/?pid=1144&#34;&gt;http://puarts.com/?pid=1144&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WPF内のSetCursorPos()とアンマネージdll関数のmouse_event()でイベント発火させると良いらしい。&lt;/p&gt;

&lt;h1 id=&#34;考察:046002245d2b3b653a986c98e88234bb&#34;&gt;考察&lt;/h1&gt;

&lt;p&gt;原因は分からん。エラーも何も出ずに全力で無視されるんだけど、フレームワーク都合の何かっぽい。
WPFが低レイヤーのどこかでイベントを上書きしてるんだろうか。
方法1はWPF環境でなければ普通はいける。UnityのC#上からとかでも問題はない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exifとの格闘の記録</title>
      <link>https://sharkattack51.github.io/post/exif/</link>
      <pubDate>Sat, 09 May 2015 13:47:36 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/exif/</guid>
      <description>

&lt;p&gt;モバイル端末で撮影した写真画像をUnityの実行時にダウンロード。
jpegの画像方向が違っていた。原因はExif。&lt;/p&gt;

&lt;h1 id=&#34;orientation:160c20f234b91182f09adf126dc2ead9&#34;&gt;Orientation&lt;/h1&gt;

&lt;p&gt;ExifのOrientation情報見てみる。
調べたらなんか情報が錯綜していたが内容としてはこれっぽい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hackmylife.net/archives/7400448.html&#34;&gt;http://hackmylife.net/archives/7400448.html&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Orientation&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;補正方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;そのまま&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;180度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;左右反転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転、時計周りに270度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時計周りに90度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転、時計周りに90度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時計周りに270度回転&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;しかし、ここらへんのExif確認ツールで見ても、ツールごとに表示が違うんだがなんなのこれ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExifRead
&lt;a href=&#34;http://freesoft-100.com/review/exif-reader.html&#34;&gt;http://freesoft-100.com/review/exif-reader.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;F6Exif
&lt;a href=&#34;http://www.vector.co.jp/soft/winnt/art/se427764.html&#34;&gt;http://www.vector.co.jp/soft/winnt/art/se427764.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ExifTool
&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/&#34;&gt;http://www.sno.phy.queensu.ca/~phil/exiftool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変に日本語化されてないし、確認はExifToolが良い気がする。&lt;/p&gt;

&lt;h1 id=&#34;exifライブラリ-c:160c20f234b91182f09adf126dc2ead9&#34;&gt;Exifライブラリ(C#)&lt;/h1&gt;

&lt;p&gt;さて、こんなのあったので自前で判定してやってみる。
&lt;a href=&#34;http://blog.ch3cooh.jp/entry/20111222/1324552051&#34;&gt;http://blog.ch3cooh.jp/entry/20111222/1324552051&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;うーなんか自前すぎるしライブラリあるんちゃうん。あった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExifLib   &lt;a href=&#34;http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET&#34;&gt;http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~~~&lt;/p&gt;

&lt;p&gt;その後、だいぶつらみがあったので途中で萎えて辞めた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 回転方向の判定 &amp;gt; できた
- 判定した方向でTexture2Dから取ったColor32配列を回転させる &amp;gt; できた
- 画像が長方形の時、回転後の配列サイズが...元のTexture2Dサイズが.. &amp;gt; 萎え
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;imagemagick:160c20f234b91182f09adf126dc2ead9&#34;&gt;ImageMagick&lt;/h1&gt;

&lt;p&gt;少し調べてImageMagickに神オプションを発見。すべてよしなにやってくれる&lt;code&gt;AutoOrient&lt;/code&gt;オプションがー。&lt;/p&gt;

&lt;p&gt;今回の案件的にはサーバーサイドで対応可能なので、そっちでやってもらうことにした。&lt;/p&gt;

&lt;h1 id=&#34;imagemagick-c-ラッパー:160c20f234b91182f09adf126dc2ead9&#34;&gt;ImageMagick C#ラッパー&lt;/h1&gt;

&lt;p&gt;ImageMagickのC#ラッパーあるっぽいし、AutoOrient()でやってくれるっぽいんでちょっとやってみる。&lt;/p&gt;

&lt;p&gt;WPFとかだったらVisualStudioでNugetできる。ていうか調べると大体System.Drawingのクラス使っててUnityのMonoではつらい印象。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick.NET   &lt;a href=&#34;https://imagemagick.codeplex.com/&#34;&gt;https://imagemagick.codeplex.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Unityからどうやって使うん？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Magick.NET    &lt;a href=&#34;https://magick.codeplex.com/&#34;&gt;https://magick.codeplex.com/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コンパイルえらーがー&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unhandled Exception: System.TypeLoadException:
Could not load type &#39;ImageMagick.MagickImage&#39; from assembly &#39;Magick.NET-x86,
Version=7.0.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec&#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DomaMagick    &lt;a href=&#34;http://magickwand.blog43.fc2.com/blog-category-25.html&#34;&gt;http://magickwand.blog43.fc2.com/blog-category-25.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今回使いたいAutoOrientがないっぽい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;結論:160c20f234b91182f09adf126dc2ead9&#34;&gt;結論&lt;/h3&gt;

&lt;p&gt;Magick.NETがいけそうだったけど、Unity(Mono)だとやりたいことができなかった。
無念感でいっぱいだが、やる方法あると思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのワークフロー</title>
      <link>https://sharkattack51.github.io/post/hugo_flow/</link>
      <pubDate>Fri, 01 May 2015 21:01:47 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/hugo_flow/</guid>
      <description>

&lt;p&gt;このサイトは&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;を使っている。そして頻繁に更新しない。
ので、新規ポストのたびに使い方調べる羽目になってつらい。ので、使い方思い出す用のメモ。&lt;/p&gt;

&lt;h1 id=&#34;ポストの新規作成:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;ポストの新規作成&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo new post/post_name.md&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;ローカルサーバーで確認:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;ローカルサーバーで確認&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo server --buildDrafts --watch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hugo server -D -w&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;パブリッシュ:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;パブリッシュ&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;デプロイ:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;デプロイ&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git push origin master&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SublimeText-OmniSharpでUnityのコード補完設定</title>
      <link>https://sharkattack51.github.io/post/sublime_unity/</link>
      <pubDate>Fri, 01 May 2015 20:35:42 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/sublime_unity/</guid>
      <description>

&lt;p&gt;幾度かの挫折の末にやっと判明した設定方法について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;その後Monodevelopとさらばしたかったが、結局なかなか離れられていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考元:bf320ad6e095134691cd2a21bde2ae24&#34;&gt;参考元&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.radjor.com/blog/p/65&#34;&gt;http://www.radjor.com/blog/p/65&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;手順:bf320ad6e095134691cd2a21bde2ae24&#34;&gt;手順&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SublimeText&lt;/code&gt;に&lt;code&gt;OmniSharp&lt;/code&gt;パッケージをインストール&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mono&lt;/code&gt;をインストール

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mono-project.com/&#34;&gt;http://www.mono-project.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityのプロジェクトディレクトリで&lt;code&gt;.sublime-project&lt;/code&gt;を保存

&lt;ul&gt;
&lt;li&gt;sublコマンドで開くとらくちん&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.sublime-project&lt;/code&gt;を編集&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;xxxxx-csharp.sln&lt;/code&gt;の設定とUnity用ファイルのプロジェクト除外設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;folders&amp;quot;:
    [
        {
            &amp;quot;follow_symlinks&amp;quot;: true,
            &amp;quot;path&amp;quot;: &amp;quot;.&amp;quot;,
            &amp;quot;file_exclude_patterns&amp;quot;:
            [
                &amp;quot;*.meta&amp;quot;,
                &amp;quot;*.csproj&amp;quot;,
                &amp;quot;*.unityproj&amp;quot;
            ],
            &amp;quot;folder_include_patterns&amp;quot;:
            [
                &amp;quot;Assets&amp;quot;,
                &amp;quot;Assets/*&amp;quot;
            ]
        }
    ],
    &amp;quot;solution_file&amp;quot;: &amp;quot;xxxxxxxx-csharp.sln&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Packages/OmniSharp/PrebuiltOmniSharpServer/config.json&lt;/code&gt;でwarningの無視設定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトでwarning出過ぎなので個人的にはまだ足りない。warningは駆逐したい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;IgnoredCodeIssues&amp;quot;:
[
    &amp;quot;^Keyword &#39;private&#39; is redundant. This is the default modifier.$&amp;quot;,
    &amp;quot;.* should not separate words with an underscore.*&amp;quot;,
    &amp;quot;^Redundant argument name specification$&amp;quot;,
    &amp;quot;^Convert to &#39;.*&#39; expre.&amp;quot;,
    &amp;quot;^Use &#39;var&#39; keyword$&amp;quot;,
    &amp;quot;^Name should have prefix.&amp;quot;,
    &amp;quot;^Redundant ToString.&amp;quot;,
    &amp;quot;^Initializing field by default value is redundant$&amp;quot;,
    &amp;quot;^Parameter can be IComparable$&amp;quot;,
    &amp;quot;^Convert to constant.*&amp;quot;,
    &amp;quot;^Variable could be moved to a nested scope$&amp;quot;,
    &amp;quot;^Method never reaches its end or a &#39;return&#39; statement.$&amp;quot;,
    &amp;quot;.* should start with an upper case letter. \\(Rule &#39;Enum Members&#39;\\)$&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Unity AVProWindowsMediaプラグインでスムーズな動画再生を行う</title>
      <link>https://sharkattack51.github.io/post/avpro_windows_media/</link>
      <pubDate>Sat, 21 Mar 2015 20:57:00 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/avpro_windows_media/</guid>
      <description>

&lt;p&gt;実はWMV再生が遅かったので（再生時デコードに時間がかかり、解像度が大きい映像データだとカクつく）
その対応方法について&lt;/p&gt;

&lt;h1 id=&#34;ハードウェアで対応:0c800cade67495a7e4307e6494708031&#34;&gt;ハードウェアで対応&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;GPU,CPUは速いのが良い&lt;/li&gt;
&lt;li&gt;SSDが良い&lt;/li&gt;
&lt;li&gt;AVProWindowsMediaプラグイン自体は64bit対応されているので64bitビルドがお勧め

&lt;ul&gt;
&lt;li&gt;Unity4はEditorが32bitなので環境違いに注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;colourformatで対応:0c800cade67495a7e4307e6494708031&#34;&gt;ColourFormatで対応&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;速い

&lt;ul&gt;
&lt;li&gt;YCbCr_HD (default)&lt;/li&gt;
&lt;li&gt;YCbCr_SD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;遅い

&lt;ul&gt;
&lt;li&gt;RGBA32&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;解像度で対応:0c800cade67495a7e4307e6494708031&#34;&gt;解像度で対応&lt;/h1&gt;

&lt;p&gt;速↑&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;幅、高さともに2乗 (eg 256, 512, 1024, 2048, 4096)&lt;/li&gt;
&lt;li&gt;幅のみ2乗&lt;/li&gt;
&lt;li&gt;幅、高さともに16の倍数&lt;/li&gt;
&lt;li&gt;幅のみ16の倍数&lt;/li&gt;
&lt;li&gt;幅、高さともに4の倍数&lt;/li&gt;
&lt;li&gt;幅のみ4の倍数&lt;/li&gt;
&lt;li&gt;幅、高さともに上記に当てはまらない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;遅↓&lt;/p&gt;

&lt;h1 id=&#34;codecで対応:0c800cade67495a7e4307e6494708031&#34;&gt;Codecで対応&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.avi&lt;/code&gt;を使用する&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp4&lt;/code&gt;は大きな解像度には向いていない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hap&lt;/code&gt; が推奨。または&lt;code&gt;Xvid&lt;/code&gt;。

&lt;ul&gt;
&lt;li&gt;CPUリソースとデコード速度のバランスが良い(最適なのはHap)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DirectShowは1080pix以上の&lt;code&gt;H.264&lt;/code&gt;に対応していない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H.264&lt;/code&gt;はCPUリソースを食う&lt;/li&gt;
&lt;li&gt;非圧縮

&lt;ul&gt;
&lt;li&gt;デコード処理が無いので早い&lt;/li&gt;
&lt;li&gt;メモリ読み込みの場合にメモリオーバーになる可能性あり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.renderheads.com/portfolio/HapDirectShow/&#34;&gt;http://www.renderheads.com/portfolio/HapDirectShow/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Xvid&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xvid.com/download/&#34;&gt;https://www.xvid.com/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ffmpeg -i input.avi -b:v 50000k -c:v libxvid output.avi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;multithreadingレンダリングオプションで対応:0c800cade67495a7e4307e6494708031&#34;&gt;MultiThreadingレンダリングオプションで対応&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;UnityEditorのInspector上にて&lt;code&gt;Debug項目&lt;/code&gt;を表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTRendering設定&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;ガベージコレクションを回避:0c800cade67495a7e4307e6494708031&#34;&gt;ガベージコレクションを回避&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;明示的な呼び出しは極力避ける&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;読み込み:0c800cade67495a7e4307e6494708031&#34;&gt;読み込み&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoadMovie()&lt;/code&gt;ではなく、&lt;code&gt;LoadMovieFromMemory()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;非圧縮の場合は注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ota-tools</title>
      <link>https://sharkattack51.github.io/post/ota_tools/</link>
      <pubDate>Fri, 20 Mar 2015 22:06:33 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/ota_tools/</guid>
      <description>

&lt;p&gt;OTAインストールの準備および、証明書の入れ替えを行うmac用のコマンドラインツール。
プロビジョニングの入れ替えおよび、配布用に必要なplist、htmlを自動で生成する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/RichardBronosky/ota-tools&#34;&gt;https://github.com/RichardBronosky/ota-tools&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;サインニング時:f2acc3b9dac2091e4694592d23a8045c&#34;&gt;サインニング時&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サインニングの入れ替えを行う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ota-tools
$ ./ipa_sign XXXX.ipa XXX.mobileprovision &amp;quot;証明書登録名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ota配布時:f2acc3b9dac2091e4694592d23a8045c&#34;&gt;OTA配布時&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配布用plistとhtmlを生成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ota-tools
$ ./ipa_ota XXXX.ipa https://ipa配置のURL/ &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;インストール用のリンクとサーバー証明書を配布&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構成プロファイルをメール等で配布し、iPhone構成ユーティリティで端末にインストールしてもらう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CentOSでSSLサーバー(OTAインストール用)を立てたいレシピ</title>
      <link>https://sharkattack51.github.io/post/centos_ssl_server_recipe/</link>
      <pubDate>Fri, 20 Mar 2015 21:51:33 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/centos_ssl_server_recipe/</guid>
      <description>

&lt;h1 id=&#34;virtualboxに新規vm作成:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;VirtualBoxに新規VM作成&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vagrantが楽&lt;/li&gt;
&lt;li&gt;じゃなければ

&lt;ul&gt;
&lt;li&gt;CentOS 64bit&lt;/li&gt;
&lt;li&gt;基本デフォルト設定でおk&lt;/li&gt;
&lt;li&gt;インストールドライブにインストーラーイメージを設定する&lt;/li&gt;
&lt;li&gt;内部ネットワーク設定

&lt;ul&gt;
&lt;li&gt;割り当て : ブリッジアダプター&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;サーバー設定:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;サーバー設定&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ネットワーク設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ emacs /etc/sysconfig/network-scripts/ifcfg-eth0


ONBOOT=yes
NM_CONTROLLED=no


$ service network restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;openssh インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install openssh openssh-server openssh-clients
$ service sshd start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降はSSHにて作業&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nginx インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
$ yum install nginx
$ service nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;php-fpm インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install php-fpm
$ emacs /etc/php-fpm.d/www.conf


user = nginx
group = nginx


$ service php-fpm start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Boot設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ chkconfig iptables off
$ chkconfig nginx on
$ chkconfig php-fpm on
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;サーバー証明書作成:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;サーバー証明書作成&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~
$ openssl genrsa 2048 &amp;gt; cert.key
$ openssl req -new -x509 -days 3650 -key cert.key -out cert.crt -subj &#39;/CN=XXXXXXXX&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;iPhone構成ユーティリティから&lt;code&gt;.mobileconfig&lt;/code&gt;の生成

&lt;ul&gt;
&lt;li&gt;構成プロファイル &amp;gt; 新規作成 &amp;gt; 資格情報にcrtの登録 &amp;gt; 書き出し

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cert.crt&lt;/code&gt;をインポート&lt;/li&gt;
&lt;li&gt;プロファイル表示名を設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cert.mobileconfig&lt;/code&gt;を書き出し&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;nginx設定を変更:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;nginx設定を変更&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;https設定として証明書を指定、phpの動作を有効化する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /etc/nginx/conf.d
$ mv default.conf default.conf.bak
$ emacs example_ssl.conf


server {
    listen        80;
    listen        443 ssl;
    server_name   XXXXXXXX;


    ssl_certificate       /XXX/cert.crt;
    ssl_certificate_key   /XXX/cert.key;


    ssl_session_cache     shared:SSL:1m;
    ssl_session_timeout   5m;


    ssl_ciphers                 HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers   on;


    location / {
        root    /usr/share/nginx/html;
        index   index.html index.htm index.php;
    }


    location ~ \.php$ {
        root           /usr/share/nginx/html;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
        include        fastcgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定ファイルのテスト&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ service nginx configtest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定ファイルの更新反映&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ service nginx reload
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vuforia 4.0</title>
      <link>https://sharkattack51.github.io/post/vuforia4/</link>
      <pubDate>Tue, 03 Mar 2015 12:51:22 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/vuforia4/</guid>
      <description>

&lt;h1 id=&#34;料金体系:4ec59d951bd1d25028b10bfb23a0caa6&#34;&gt;料金体系&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ライセンス有料化(クラウド、デバイス両マーカーで共通の模様)

&lt;ul&gt;
&lt;li&gt;DeveloperPotalにてアプリケーションごとにライセンス取得&lt;/li&gt;
&lt;li&gt;認識回数によるライセンス&lt;/li&gt;
&lt;li&gt;開発ライセンスはウォーターマーク入りにて月額無料&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bronze&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Silver&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Gold&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Platinum&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;月額&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$99/mo&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$399/mo&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$999/mo&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Contact Us&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;認識回数（月ごと）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;クラウド登録マーカー数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1,000,000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;企業内アプリ&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;OK&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;サポート&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Community Forums&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Community Forums&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Community Forums&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Direct&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ClassicPlan&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;1アプリ $499 初回のみ&lt;/li&gt;
&lt;li&gt;認識数無制限でのデバイスターゲット利用

&lt;ul&gt;
&lt;li&gt;フレームマーカー、イメージマーカー、シリンダー、マルチターゲット、ユーザー定義マーカー&lt;/li&gt;
&lt;li&gt;Vuforiaに直接コンタクトする

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.vuforia.com/platinum-inquiry?utm_source=exacttarget&amp;amp;utm_medium=email&#34;&gt;https://developer.vuforia.com/platinum-inquiry?utm_source=exacttarget&amp;amp;utm_medium=email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;新機能:4ec59d951bd1d25028b10bfb23a0caa6&#34;&gt;新機能&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iOS 64bit サポート&lt;/li&gt;
&lt;li&gt;オブジェクトトラッキング

&lt;ul&gt;
&lt;li&gt;事前の３Dトラッキング情報を利用する

&lt;ul&gt;
&lt;li&gt;AndroidのScannerアプリによって特徴点データ生成

&lt;ul&gt;
&lt;li&gt;トラッキング基準としてA4サイズまたはハガキサイズのマーカーを利用する&lt;/li&gt;
&lt;li&gt;撮影時、上記マーカーが撮影アングルに入るような物理的な卓上サイズでなければスキャンできない&lt;/li&gt;
&lt;li&gt;特徴的な形状または、表面模様を検出する。検出ルールはおそらく画像マーカーと同様。&lt;/li&gt;
&lt;li&gt;平坦なライティング環境が良い&lt;/li&gt;
&lt;li&gt;グレーの机が良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;たぶん下記は認識アウト

&lt;ul&gt;
&lt;li&gt;スキャン時と違いすぎる照明環境&lt;/li&gt;
&lt;li&gt;変形するもの&lt;/li&gt;
&lt;li&gt;反射するもの&lt;/li&gt;
&lt;li&gt;見上げて認識させようとする場合(スキャン時は見下げの状態なので)&lt;/li&gt;
&lt;li&gt;特徴的な凸凹が無い形状&lt;/li&gt;
&lt;li&gt;パターン的な表面&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スキャン方法

&lt;ol&gt;
&lt;li&gt;Androidのスキャナーアプリで点群データを計測

&lt;ul&gt;
&lt;li&gt;現在はDeveloperPotalから&lt;code&gt;.apk&lt;/code&gt;をダウンロードし、手動でインストール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;.odデータを書き出す

&lt;ul&gt;
&lt;li&gt;端末からメールなどを利用して送信&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DeveloperPortalでターゲットデータベースに登録

&lt;ul&gt;
&lt;li&gt;アプリケーションのライセンスに紐付け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityパッケージデータをダウンロード&lt;/li&gt;
&lt;li&gt;アプリ組み込み&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>