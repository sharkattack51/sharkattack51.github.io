<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dokyuments</title>
    <link>https://sharkattack51.github.io/</link>
    <description>Recent content on Dokyuments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
    
    
    <lastBuildDate>Sat, 01 Oct 2016 09:17:47 JST</lastBuildDate>
    <atom:link href="https://sharkattack51.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Windows10アニバーサリーアップデートしたついでに Bash on Ubuntu on Windows いれたのでとりあえずやってみた設定</title>
      <link>https://sharkattack51.github.io/post/BoW/</link>
      <pubDate>Sat, 01 Oct 2016 09:17:47 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/BoW/</guid>
      <description>

&lt;p&gt;まず&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt update&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ apt upgrade&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;とりま&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt install build-essential&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ apt install git&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;ホスト名解決:60439b64dadb6abbf5cca3cbbdddb953&#34;&gt;ホスト名解決&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ echo 127.0.1.1 $(hostname) &amp;gt;&amp;gt; /etc/hosts&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;zsh-インストール:60439b64dadb6abbf5cca3cbbdddb953&#34;&gt;zsh インストール&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ apt install zsh&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;sh作って-bash-を-zsh-へ切り替える:60439b64dadb6abbf5cca3cbbdddb953&#34;&gt;sh作って bash を zsh へ切り替える&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ mv /bin/bash /bin/.bash&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ touch /bin/bash&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ chmod 755 /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
if [ $SHELL = /bin/bash ]; then
  export SHELL=/bin/zsh
  exec $SHELL
else
  /bin/.bash $*
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あと .zshrc の各種設定。&lt;/p&gt;

&lt;h4 id=&#34;golang-インストール:60439b64dadb6abbf5cca3cbbdddb953&#34;&gt;golang インストール&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ apt install golang&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;現状 &lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco&lt;/a&gt; 入れるとこで何故かはまり中、、、&lt;/p&gt;

&lt;h4 id=&#34;win-ubuntu-それぞれのマウント状態確認:60439b64dadb6abbf5cca3cbbdddb953&#34;&gt;Win/Ubuntu それぞれのマウント状態確認&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;(Win) C: =&amp;gt; (Ubuntu) /mnt/c&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;(Ubuntu) ~ =&amp;gt; (Win) C:/Users/user/AppData/Local/lxss/home/user&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redux.NET</title>
      <link>https://sharkattack51.github.io/post/redux_net/</link>
      <pubDate>Thu, 02 Jun 2016 18:57:00 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/redux_net/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/GuillaumeSalles/redux.NET&#34;&gt;https://github.com/GuillaumeSalles/redux.NET&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State 管理のライブラリ。内部で Rx を用いることで、ライブラリ自体はごく薄いものとなっている。他と組み合わせやすそう。&lt;/li&gt;
&lt;li&gt;オリジナルは JS 版&lt;/li&gt;
&lt;li&gt;Rx がもつ「関係性をプログラムする」という流れを踏襲することで、機能分割を明確にできる&lt;/li&gt;
&lt;li&gt;ロジックを一カ所にまとめることができる&lt;/li&gt;
&lt;li&gt;データフローが一方向になる&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考:03df5dba7e680b3c94d9a06794d60928&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;10分で理解する Redux の基礎&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kiita312/items/49a1f03445b19cf407b7&#34;&gt;http://qiita.com/kiita312/items/49a1f03445b19cf407b7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なぜ Redux を使うのか&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/kuy/nazereduxwoshi-ufalseka&#34;&gt;https://speakerdeck.com/kuy/nazereduxwoshi-ufalseka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;登場人物:03df5dba7e680b3c94d9a06794d60928&#34;&gt;登場人物&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Action : 何をするかの内容をもつオブジェクト&lt;/li&gt;
&lt;li&gt;State : アプリケーションの状態をもつオブジェクト&lt;/li&gt;
&lt;li&gt;Store : 現在の State を持つ。Action を受け取って State と一緒に Reducer に渡す&lt;/li&gt;
&lt;li&gt;Reducer : 受け取った Action と State から新しい State を返す。Pure 関数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;流れ:03df5dba7e680b3c94d9a06794d60928&#34;&gt;流れ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ViewProvider は View の各コンポーネントを管理し、関連付けを行う。&lt;/li&gt;
&lt;li&gt;ViewProvider は状態を持たない&lt;/li&gt;
&lt;li&gt;Store が個別の状態 State を持っており、ViewProvider が Store を持っている&lt;/li&gt;
&lt;li&gt;各コンポーネントは Store に Action を Dispatch することで処理を実行する。各コンポーネント自体が処理を実行はしない。&lt;/li&gt;
&lt;li&gt;State オブジェクトは現在のアプリケーションの状態をもつ。ツリー構造を用いて全体的な状態をもつこともできる。&lt;/li&gt;
&lt;li&gt;実際の処理は Store が現在の State と一緒に、送られた Action を Reducer に渡す&lt;/li&gt;
&lt;li&gt;Reducer は State と Action をもとに新しい State を返す。（元の State オブジェクトを更新しない。Pure関数）&lt;/li&gt;
&lt;li&gt;Reducer は Pure 関数であり、入力Aの場合は毎回Bを返さなければならない&lt;/li&gt;
&lt;li&gt;Reducer はだんだん肥大化するので、分割を検討する。Stateのツリー構造に対応して子Reducerに分割し、親Reducerがまとめるようにする。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pure関数:03df5dba7e680b3c94d9a06794d60928&#34;&gt;Pure関数&lt;/h3&gt;

&lt;p&gt;必ず結果が一緒になる関数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引数の値を変更するのはだめ&lt;/li&gt;
&lt;li&gt;副作用をおこす(APIを呼んだり、ルーティングを変えるなど)はだめ&lt;/li&gt;
&lt;li&gt;毎回値が変わるもの(Date.now() や Math.random())を扱うのはだめ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3原則:03df5dba7e680b3c94d9a06794d60928&#34;&gt;3原則&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Single source of truth&lt;/p&gt;

&lt;p&gt;アプリケーション内でStoreは1つのみとし、State は単独のオブジェクトとしてStoreに保持される。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;State is read-only&lt;/p&gt;

&lt;p&gt;State を直接変更することはできず、action を Store へ dispatch することでしか State は変更できない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mutations are written as pure functions&lt;/p&gt;

&lt;p&gt;State を変更する関数 Reducer は pure な関数にする。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>sublime での as3 ビルド設定</title>
      <link>https://sharkattack51.github.io/post/sublime_build_as3/</link>
      <pubDate>Sun, 17 Jan 2016 21:28:29 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/sublime_build_as3/</guid>
      <description>

&lt;p&gt;FlashDevelop が mac - CrossOver 使っても満足する感じで使えなかったので
sublime でのセットアップメモ。&lt;/p&gt;

&lt;h1 id=&#34;air-sdk-のダウンロード:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;AIR SDK のダウンロード&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.adobe.com/devnet/air/air-sdk-download.html&#34;&gt;http://www.adobe.com/devnet/air/air-sdk-download.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;build-systemの追加:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;Build Systemの追加&lt;/h1&gt;

&lt;p&gt;ここ &lt;a href=&#34;https://gist.github.com/newtriks/3131123&#34;&gt;https://gist.github.com/newtriks/3131123&lt;/a&gt;
を参考に sublime の build system を追加。
&lt;code&gt;~/LIbrary/Application Support/Sublime Text 3/Packages/User&lt;/code&gt; の下に置く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json:as3.sublime-build&#34;&gt;{
	&amp;quot;cmd&amp;quot;: [
		&amp;quot;/AIR_SDK_PATH/bin/mxmlc&amp;quot;, 
		&amp;quot;$file&amp;quot;,
		&amp;quot;-static-link-runtime-shared-libraries=true&amp;quot;,
		&amp;quot;-load-config+=${file_path}/../sublime_build_config.xml&amp;quot;
	],
	&amp;quot;file_regex&amp;quot;: &amp;quot;(.*)[(](\\d+)[)]:(?: col: (?:\\d+))? *Error: (.*)&amp;quot;,
	&amp;quot;selector&amp;quot;: &amp;quot;source.actionscript&amp;quot;,
	&amp;quot;variants&amp;quot;: [
		{
			&amp;quot;cmd&amp;quot;: [
				&amp;quot;open &#39;/Applications/Flash Player.app&#39; ${file_path}/../bin/${file_base_name}.swf&amp;quot;
			],
			&amp;quot;shell&amp;quot;: true,
			&amp;quot;name&amp;quot;: &amp;quot;Run&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-load-config&lt;/code&gt; オプションで xml の Build コンフィグを利用するようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml:sublime_build_config.xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;flex-config&amp;gt;
	&amp;lt;target-player&amp;gt;20.0&amp;lt;/target-player&amp;gt;
	&amp;lt;swf-version&amp;gt;31&amp;lt;/swf-version&amp;gt;
	&amp;lt;compiler&amp;gt;
		&amp;lt;accessible&amp;gt;true&amp;lt;/accessible&amp;gt;
		&amp;lt;source-path&amp;gt;
			&amp;lt;path-element&amp;gt;src&amp;lt;/path-element&amp;gt;
			&amp;lt;path-element&amp;gt;lib&amp;lt;/path-element&amp;gt;
		&amp;lt;/source-path&amp;gt;
		&amp;lt;show-actionscript-warnings&amp;gt;true&amp;lt;/show-actionscript-warnings&amp;gt;
		&amp;lt;debug&amp;gt;true&amp;lt;/debug&amp;gt;
		&amp;lt;library-path&amp;gt;
			&amp;lt;path-element&amp;gt;gui&amp;lt;/path-element&amp;gt;
		&amp;lt;/library-path&amp;gt;
		&amp;lt;optimize&amp;gt;true&amp;lt;/optimize&amp;gt; 
	&amp;lt;/compiler&amp;gt;
	&amp;lt;output&amp;gt;bin/Main.swf&amp;lt;/output&amp;gt;
&amp;lt;/flex-config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとコンパイルオプションはここが詳しい。
&lt;a href=&#34;https://sites.google.com/site/shin1ogawa/adobe-air/mxml-compile&#34;&gt;https://sites.google.com/site/shin1ogawa/adobe-air/mxml-compile&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;java-実行バージョン変更:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;Java 実行バージョン変更&lt;/h1&gt;

&lt;p&gt;fdb 実行のために Java を 32bit 対応バージョン v1.6 へ変更する。
標準でインストール済なので環境変数 JAVA_HOME の参照先を変更するのみ。
.zshrc に追加した。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ export JAVA_HOME=$(/usr/libexec/java_home -d32)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;コンソール出力の文字化け対応:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;コンソール出力の文字化け対応&lt;/h1&gt;

&lt;p&gt;Java の文字コードが OSX と異なるために文字化けする。
以下ファイル内の最終行、java コマンドに encoding オプションを追加する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bin/compc&lt;/li&gt;
&lt;li&gt;bin/fdb&lt;/li&gt;
&lt;li&gt;bin/mxmlc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変更 : &lt;code&gt;java -Dfile.encoding=UTF8 $VMARGS...&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;その他:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;その他&lt;/h1&gt;

&lt;h3 id=&#34;デバッグ実行:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;デバッグ実行&lt;/h3&gt;

&lt;p&gt;fdb コマンドを .zshrc に alias で追加した。デバッグ時はこっちで起動する。
.sublime-build で BUild - Run でデバッグ実行したかったが、java の切り替えが上手くいかなくて起動できなかった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ fdb -f SWF/TO/PATH&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;fdb-使い方:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;fdb 使い方&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/tutui/items/1c1b79572c0d82ea3983&#34;&gt;http://qiita.com/tutui/items/1c1b79572c0d82ea3983&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 次のブレークポイントまで実行 : c(continue)
(fdb) c
// 変数表示 : p (print)
(fdb) p value
// ステップ実行 : s (step)
(fdb) s
// 強制終了 : k (kill)
(fdb) k
// fdb終了 : q (quit)
(fdb) q

// ブレークポイントの設定方法 : b (break)
(fdb) b 行番号
(fdb) b 関数名
(fdb) b test.as:10 (test.asの10行目に設定)
(fdb) b test.as:execute (test.asのexecute()に設定)
// 設定中のブレークポイントの確認方法 : i b (info break)
(fdb) i b
// 設定中のブレークポイントの削除方法 : d (delete)
(fdb) d Num (i bで表示された「Num」カラムの値を指定)

// ヘルプ : help
(fdb) help
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flashdevelop-からの移行の場合:dcd0c2a6d767c9690c91b7f090ca5cda&#34;&gt;FlashDevelop からの移行の場合&lt;/h3&gt;

&lt;p&gt;Build コンフィグの xml を引き継いで使うのが良い。一部パス設定の変更と、項目の追加を行う。&lt;/p&gt;

&lt;p&gt;追加 &lt;code&gt;&amp;lt;swf-version&amp;gt;31&amp;lt;/swf-version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.sublime-build の コンフィグ xml 指定パスも変更する。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MS-OfficeファイルをIEで開く設定</title>
      <link>https://sharkattack51.github.io/post/office-in-browser/</link>
      <pubDate>Sat, 08 Aug 2015 20:03:20 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/office-in-browser/</guid>
      <description>&lt;p&gt;MS-Officeファイルを、とくにPowerPointを自前のアプリケーションで開く場合に
一番簡単な方法でIEに丸投げする方法がある。&lt;/p&gt;

&lt;p&gt;Viewer用のActiveXとか探すとあるみたいだけど、バージョンの互換で辛くなること必至なので
MSにおまかせするのが正解な気がする。&lt;/p&gt;

&lt;p&gt;IEで開ける＝WindowsFormやWPFなどのWebBrowserコントロールで開くことができるようになる。&lt;/p&gt;

&lt;p&gt;ただし、標準設定ではIE上で開くことができないのでレジストリを設定する必要がある。
あと、警告でるので無視する設定が必要。&lt;/p&gt;

&lt;p&gt;リポジトリはここ
&lt;a href=&#34;https://github.com/sharkattack51/office-in-browser-settings&#34;&gt;https://github.com/sharkattack51/office-in-browser-settings&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-reg&#34;&gt;Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.Document.8]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.RTF.8]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.Document.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.DocumentMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.Sheet.8]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.Sheet.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.SheetMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.SheetBinaryMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.Show.8]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.Show.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.ShowMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.SlideShow.8]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.SlideShow.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.SlideShowMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_CURRENT_USER\Software\Microsoft\Windows\Shell\AttachmentExecute\{0002DF01-0000-0000-C000-000000000046}]
&amp;quot;Word.Document.8&amp;quot;=dword:00000000
&amp;quot;Word.RTF.8&amp;quot;=dword:00000000
&amp;quot;Word.Document.12&amp;quot;=dword:00000000
&amp;quot;PowerPoint.Show.8&amp;quot;=dword:00000000
&amp;quot;PowerPoint.Show.12&amp;quot;=dword:00000000
&amp;quot;PowerPoint.SlideShow.8&amp;quot;=dword:00000000
&amp;quot;PowerPoint.SlideShow.12&amp;quot;=dword:00000000
&amp;quot;Excel.Sheet.8&amp;quot;=dword:00000000
&amp;quot;Excel.Sheet.12&amp;quot;=dword:00000000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>OSC for Unity</title>
      <link>https://sharkattack51.github.io/post/osc/</link>
      <pubDate>Fri, 31 Jul 2015 19:12:20 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/osc/</guid>
      <description>

&lt;p&gt;ちょっと使う機会が出来たらそのうち触っておこうと思っていたOSC周りのライブラリをいろいろ漁ってみていた。
今回、正確にはTUIOを使う要件だったが、良い機会だったので下レイヤーで動いてるOSCを理解しておこうと思った。&lt;/p&gt;

&lt;h2 id=&#34;osc-tuio:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OSC/TUIO&lt;/h2&gt;

&lt;h4 id=&#34;opensound-control-osc:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OpenSound Control (OSC)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/OpenSound_Control&#34;&gt;https://ja.wikipedia.org/wiki/OpenSound_Control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSCはUDP通信上のフォーマット仕様。TUIOはさらにOSCを利用してタッチ入力用に取り決められた標準仕様という理解。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ちなみにWindowsタッチイベントはハードウェアベンダー以外の開発者が、自由にタッチイベントを発行できなかったと思うので、そんな場合もTUIOが有効。
マルチプラットフォーム対応のタッチ開発環境には同じ仕組みで対応できるのでそちらでも有用。
最近ではTouchScriptがWin7,8/iOS/Android/TUIOで全方位カバーされているのでおすすめ。
&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/7394&#34;&gt;https://www.assetstore.unity3d.com/jp/#!/content/7394&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UDPを使ったソケット通信自体は過去何度も経験があったけど、
バイナリデータでやり取りしてたり、パースを毎回自前でやってたりして大分不毛だった。
同じバイナリパース処理を3つの違う言語バージョンで書いたことある。&lt;/p&gt;

&lt;h2 id=&#34;メリットとか特徴とか:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;メリットとか特徴とか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;言語ごとにライブラリが存在するので通信処理とデータ解析処理を自前でやらなくて良い&lt;/li&gt;
&lt;li&gt;値にアクセスするためのURIっぽい構造化されたOSCアドレスが素敵&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;oscライブラリ:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OSCライブラリ&lt;/h2&gt;

&lt;p&gt;OSCのライブラリをいろいろ調べていてどれもいまいち使いにくい印象だった。
どのライブラリも受信データの分解まではやってくれるけど、受信データにもっと直ぐに、もっと簡単に、アクセスしたかった。あと汎用的に。&lt;/p&gt;

&lt;p&gt;その中でこれが良い気がした。OSCアドレス指定で受信毎のコールバックが設定できる。&lt;/p&gt;

&lt;h4 id=&#34;rug-osc:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;Rug.Osc&lt;/h4&gt;

&lt;p&gt;Simple, complete, open source OSC implementation for .NET and Mono.
&lt;a href=&#34;https://bitbucket.org/rugcode/rug.osc/overview&#34;&gt;https://bitbucket.org/rugcode/rug.osc/overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その上で、もうすこしUnityフレンドリーな感じで受信側のラッパークラス書いた。&lt;/p&gt;

&lt;h4 id=&#34;unity-oscreceivecontroller:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;Unity-OscReceiveController&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sharkattack51/Unity-OscReceiveController&#34;&gt;https://github.com/sharkattack51/Unity-OscReceiveController&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;受信の値をインスペクタで確認できるようにpublic変数でやってる。
ソースファイルを増やしたくないのでインスペクタ拡張のEditorスクリプトはわりかし作らない主義です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WinIMEパネルとRemoteDesktop-Mac</title>
      <link>https://sharkattack51.github.io/post/win_ime_panel/</link>
      <pubDate>Sat, 18 Jul 2015 22:02:30 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/win_ime_panel/</guid>
      <description>

&lt;p&gt;WinのIMEパネル表示させたくないのでいつも消しているが、
MacからRemoteDesktop使っている時に&lt;code&gt;英数/かな&lt;/code&gt;の切り替えがキーボード操作で出来なくて、
このパネルが必要になって困る。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;ime_panel.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;常時これは絶対に表示したくないし、なんとか環境に依存しない方法で解決したい。
(IMEの設定いじったり、キーマップを変えたりするのはPC環境が変わった場合に面倒なのでやらない)&lt;/p&gt;

&lt;p&gt;結果、完全解決出来なかったので、着地点を設定変更までの手数を減らすということにした。&lt;/p&gt;

&lt;h3 id=&#34;通常:f0add05a456f3f2815ef00db948f079c&#34;&gt;通常&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;コンパネを開く&lt;/li&gt;
&lt;li&gt;コンパネから地域と言語を開く&lt;/li&gt;
&lt;li&gt;地域と言語からキーボードと言語タブを開く&lt;/li&gt;
&lt;li&gt;キーボードの変更ボタンを押す&lt;/li&gt;
&lt;li&gt;テキストサービスと入力言語ウィンドウを開く&lt;/li&gt;
&lt;li&gt;言語バータブを開く&lt;/li&gt;
&lt;li&gt;言語バー設定の変更&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;手数が多すぎてやばい&lt;/p&gt;

&lt;h3 id=&#34;アイディア:f0add05a456f3f2815ef00db948f079c&#34;&gt;アイディア&lt;/h3&gt;

&lt;p&gt;上記 1. 2. 3. 4. をショートカットするコマンド&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ control input.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;コントロールパネル内の設定ウィンドウを直接開く。
&lt;code&gt;.bat&lt;/code&gt;作って設定ウィンドウopenまでショートカットする。
入力を切り替えたい時に初めてパネル表示させて、要件終わったら非表示にする。&lt;/p&gt;

&lt;p&gt;あと２クリックをショートカットできたら、、、、、、、、、、、、、、&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtualbox上のCentOSのディスク容量を追加する</title>
      <link>https://sharkattack51.github.io/post/virtualbox_add_disk/</link>
      <pubDate>Thu, 02 Jul 2015 20:00:00 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/virtualbox_add_disk/</guid>
      <description>&lt;p&gt;VMで動かしていたCentOSが容量一杯になってしまったので緊急調べた。&lt;br/&gt;
基本的には下記のどっちかでなんとかなる。ほんとWeb無かったらなんも分からないです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.clock-up.jp/entry/2015/05/03/virtualbox-centos-disk-ext&#34;&gt;http://blog.clock-up.jp/entry/2015/05/03/virtualbox-centos-disk-ext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.clock-up.jp/entry/2015/05/29/virtualbox-centos-disk-vdi-ext&#34;&gt;http://blog.clock-up.jp/entry/2015/05/29/virtualbox-centos-disk-vdi-ext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;簡単なのは物理ディスクを追加するやり方。Virtualbox上から追加する。&lt;br/&gt;
追加したら&lt;code&gt;$ fdisk /dev/sda&lt;/code&gt;とか&lt;code&gt;$ fdisk /dev/sdb&lt;/code&gt;でパーティション設定してやる。&lt;/p&gt;

&lt;p&gt;ここは&lt;code&gt;m&lt;/code&gt;コマンドでヘルプを確認しながらやるべき。&lt;br/&gt;
&lt;code&gt;4&lt;/code&gt;まで使える&lt;code&gt;primaryパーティション&lt;/code&gt;を設定してやる。&lt;br/&gt;
テーブルの開始位置と終わりの位置を設定するが、基本はデフォルトでやれば追加容量分を全部使う感じ。&lt;/p&gt;

&lt;p&gt;追加できたら再起動 &lt;code&gt;$ shutdown -r now&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;その後、&lt;br/&gt;
&lt;code&gt;$ fdisk -l&lt;/code&gt;で追加したパーティションを確認する。追加できているがまだ使えない。&lt;br/&gt;
&lt;code&gt;$ pvcreate /dev/sda3&lt;/code&gt;でパーティションに物理ボリュームを作り、&lt;br/&gt;
&lt;code&gt;$ vgextend VolGroup /dev/sda3&lt;/code&gt;でボリュームグループの設定し、&lt;br/&gt;
&lt;code&gt;$ lvextend -l +100%FREE /dev/mapper/VolGroup-lv_root&lt;/code&gt;でボリューム拡張して、&lt;br/&gt;
&lt;code&gt;$ resize2fs /dev/mapper/VolGroup-lv_root&lt;/code&gt;でファイルシステムを拡張する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ df&lt;/code&gt;でディスク確認してみると拡張出来ている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReactiveProgrammingに関する参照情報</title>
      <link>https://sharkattack51.github.io/post/reactive_reference/</link>
      <pubDate>Wed, 01 Jul 2015 17:41:17 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/reactive_reference/</guid>
      <description>&lt;p&gt;まず一回ここら辺を適当に読み漁って概要をなんとなく拾う。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【翻訳】あなたが求めていたリアクティブプログラミング入門&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ninjinkun.hatenablog.com/entry/introrxja&#34;&gt;http://ninjinkun.hatenablog.com/entry/introrxja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactive Porn&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://steps.dodgson.org/b/2014/12/07/reactive-porn/&#34;&gt;http://steps.dodgson.org/b/2014/12/07/reactive-porn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なぜリアクティブプログラミングは重要か。&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://d.hatena.ne.jp/pokarim/20101226&#34;&gt;http://d.hatena.ne.jp/pokarim/20101226&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactive Programming in Javascript&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ahomu.github.io/s/150221-frontrend_conference/#1&#34;&gt;http://ahomu.github.io/s/150221-frontrend_conference/#1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;スマートフォンアプリでリアクティブプログラミングをしているが、Promiseとデータバインディングとして使っている&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ninjinkun.hatenablog.com/entry/2015/03/21/143712&#34;&gt;http://ninjinkun.hatenablog.com/entry/2015/03/21/143712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android開発でRxJavaをチームに導入した話&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://techlife.cookpad.com/entry/2015/04/17/100000&#34;&gt;http://techlife.cookpad.com/entry/2015/04/17/100000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RxJSをもくもくしてReactivePropertyの価値らしきものを気づかされた話（仮）&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://saneyukis.hatenablog.com/entry/2015/05/12/125317&#34;&gt;http://saneyukis.hatenablog.com/entry/2015/05/12/125317&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未来のプログラミング技術をUnityで -UniRx-&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/torisoup/unity-unirx&#34;&gt;http://www.slideshare.net/torisoup/unity-unirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UniRxとカスタムバインディング&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ykimisaki.hatenablog.jp/entry/2015/03/25/012436&#34;&gt;http://ykimisaki.hatenablog.jp/entry/2015/03/25/012436&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observable Everywhere - Rxの原則とUniRxにみるデータソースの見つけ方&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/neuecc/observable-everywhere-rxuni-rx&#34;&gt;http://www.slideshare.net/neuecc/observable-everywhere-rxuni-rx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、雰囲気を把握したらなんでも良いのでRxライブラリを一回触ってみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C# / &lt;strong&gt;ReactiveExtentions&lt;/strong&gt; &lt;a href=&#34;https://rx.codeplex.com&#34;&gt;https://rx.codeplex.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unity / &lt;strong&gt;UniRx&lt;/strong&gt; &lt;a href=&#34;https://github.com/neuecc/UniRx&#34;&gt;https://github.com/neuecc/UniRx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python / &lt;strong&gt;RxPY&lt;/strong&gt; &lt;a href=&#34;https://github.com/ReactiveX/RxPY&#34;&gt;https://github.com/ReactiveX/RxPY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AS3 / &lt;strong&gt;Raix&lt;/strong&gt; &lt;a href=&#34;https://github.com/richardszalay/raix&#34;&gt;https://github.com/richardszalay/raix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ライブラリのドキュメント読んで、触りだけでもやったらこれ読んで大体機能を把握する。神資料。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactiveExtentions入門&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/okazuki0130/reactive-extensionsv01&#34;&gt;http://www.slideshare.net/okazuki0130/reactive-extensionsv01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その後、UniRx勉強会のスライド見直してまとめ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;はじめてのUniRx&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/torisoup/uni-rx&#34;&gt;http://www.slideshare.net/torisoup/uni-rx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interactive UI with UniRx&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/yutoiwashita/reactive-ui-withunirx&#34;&gt;http://www.slideshare.net/yutoiwashita/reactive-ui-withunirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;History &amp;amp; Practices for UniRx UniRxの歴史、或いは開発(中)タイトルの用例と落とし穴の回避法&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/neuecc/history-practices-for-unirx-unirx&#34;&gt;http://www.slideshare.net/neuecc/history-practices-for-unirx-unirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、この後に上の方の資料を見直すと大分理解が深まる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>as3 レスポンスヘッダーが取得できない</title>
      <link>https://sharkattack51.github.io/post/as3_get_response_header/</link>
      <pubDate>Tue, 09 Jun 2015 21:36:28 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/as3_get_response_header/</guid>
      <description>&lt;p&gt;as3でサーバーからのレスポンスヘッダーを取りたかった。&lt;br/&gt;
どうやらflash上ではできないらしい。&lt;br/&gt;
マジと思って調べたらマジだった。みんなこれでやってたのか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTPStatusEvent&lt;/code&gt;クラスで取れる気がしたが、
リファレンスをよく見ると&lt;code&gt;responseHeaders&lt;/code&gt;プロパティ自体のランタイム表記にFlashPlayerが密かに無い。&lt;/p&gt;

&lt;p&gt;その後少しがんばって、こことか発見して&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.livedoor.jp/kunz/archives/51364315.html&#34;&gt;http://blog.livedoor.jp/kunz/archives/51364315.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使ったら取得できた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/wbpanda/20091007/1254931878&#34;&gt;http://d.hatena.ne.jp/wbpanda/20091007/1254931878&lt;/a&gt;
&lt;a href=&#34;https://github.com/gabriel/as3httpclient&#34;&gt;https://github.com/gabriel/as3httpclient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;と思ったらローカルサーバーだとできてて、web経由だと取得できなかった。&lt;br/&gt;
これはつまりおそらく無理でflashplayerのセキュリティポリシー的なやつかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonと連携する方法</title>
      <link>https://sharkattack51.github.io/post/cs_py/</link>
      <pubDate>Sat, 23 May 2015 11:13:29 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/cs_py/</guid>
      <description>

&lt;p&gt;Pythonライブラリの有能さを覚えると、外の言語を使っている時にPythonでサクッといきたい場面がある。
もちろん実行時の処理速度に問題がなければという前提で、非同期で処理できればメインとは別のプロセスで処理できるので受けれる恩恵は大きい。&lt;/p&gt;

&lt;p&gt;例えば画像の変換の場合は&lt;a href=&#34;http://www.pythonware.com/products/pil/&#34;&gt;PIL&lt;/a&gt;なんか使うと相当楽だし、場合によっては&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt;ラッパーが使える。(もちろんネイティブライブラリよりは遅い)&lt;br/&gt;
RSSなんかのFeedのパースなんかも&lt;a href=&#34;https://pypi.python.org/pypi/feedparser&#34;&gt;UniversalFeedParser&lt;/a&gt;が有能すぎるし、&lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt;は便利だ。&lt;/p&gt;

&lt;p&gt;例えばUnityやAIRなどの実行環境からPythonに処理を投げたい場合にどうするか。
データの受け渡しはどうするか。&lt;/p&gt;

&lt;h1 id=&#34;方法:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;方法&lt;/h1&gt;

&lt;p&gt;基本的にはイベント処理で実装したいので、Python側をローカルにアプリケーションサーバーとして立てておき、メインアプリ側からhttpリクエストを送る。&lt;/p&gt;

&lt;p&gt;できるだけシンプルに実装したいのでWebフレームワークを使ってアプリケーションサーバーを立てる。
&lt;a href=&#34;http://a2c.bitbucket.org/flask/&#34;&gt;flask&lt;/a&gt;や&lt;a href=&#34;http://bottlepy.org/docs/dev/index.html&#34;&gt;Bottle&lt;/a&gt;あたりが良いと思う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;# python

from flask import Flask

app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;, methods=[&#39;GET&#39;])
def index():
	return &amp;quot;Hello&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
	app.debug = True
	app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでルート &lt;a href=&#34;http://localhost:5000/&#34;&gt;http://localhost:5000/&lt;/a&gt; にアクセスすると結果をとってこれる。
あとはhttpリクエストで非同期処理してメインアプリ側でイベント処理する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C# Python側からテキストを受け取る

IEnumerator Start()
{
	WWW www = new WWW(&amp;quot;http://localhost:5000/&amp;quot;);

	yield return www;

	Debug.log(www.text) //Hello
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数が欲しい場合は、クエリやRESTのAPIを生やして対応できるし、
画像の受け渡しが必要な場合はbyte配列にした上でformでやり取りする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C#

IEnumerator Start()
{
	WWWForm form = new WWWForm();
	form.AddBinaryData(&amp;quot;post_data&amp;quot;, texture.EncodeToPNG(), texture.name, &amp;quot;image/png&amp;quot;);
	WWW www = new WWW(&amp;quot;http://localhost:5000/test_api&amp;quot;, form);

	yield return www;

	processedTex = www.texture;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# python PILを使った画像処理結果をC#側に返す

@app.route(&amp;quot;/test_api&amp;quot;, methods=[&amp;quot;POST&amp;quot;])
def test():
	if request.method == &amp;quot;POST&amp;quot;:

		# formデータの受け取り
		image_bytes = request.files[&amp;quot;post_data&amp;quot;]

		# IOオブジェクトでbyteデータをImageに読み込む
		image = Image.open(StringIO(image_bytes.read()))
		
		# imageに対して加工処理
		# ...
		
		# 更新をbufferにpngで保存
		buf = StringIO()
		image.save(buf, &amp;quot;png&amp;quot;)

		# bufferからレスポンス作成
		response = make_response(buf.getvalue())
		response.headers[&amp;quot;Content-type&amp;quot;] = &amp;quot;Image&amp;quot;
		return response
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;アプリケーションの実装はこまごました部分をスクリプト側に委譲していく設計もありだと思う。&lt;br/&gt;
俗にいう&lt;a href=&#34;http://deeeet.com/writing/2014/09/10/microservices/&#34;&gt;Microservices&lt;/a&gt;の一つではないか。&lt;/p&gt;

&lt;p&gt;ちなみにUnityであればこういう手もある。&lt;br/&gt;
&lt;a href=&#34;http://tkitao.hatenablog.com/entry/2015/05/18/225902&#34;&gt;Unity上でPythonを使う①【アセット組み込み編】 - kitao&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>logrotate</title>
      <link>https://sharkattack51.github.io/post/logrotate/</link>
      <pubDate>Thu, 14 May 2015 22:11:58 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/logrotate/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install logrotate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;logrotate&lt;/code&gt;はデーモンではないので&lt;code&gt;crond&lt;/code&gt;によって実行される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/cron.daily/logrotate&lt;/code&gt;により
メイン設定ファイルの&lt;code&gt;/etc/logrotate.conf&lt;/code&gt;が読み込まれる。&lt;/p&gt;

&lt;p&gt;メイン設定ファイル内のincludeにより
個別設定ファイルの&lt;code&gt;/etc/logrotate.d/&lt;/code&gt;以下が読み込まれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/logrotate.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;サービスごとの設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/logrotate.d/xxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;こちらが優先される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ローテーション確認:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;ローテーション確認&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -d /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;強制実行:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;強制実行&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -f /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;実行履歴確認:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;実行履歴確認&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /var/lib/logrotate.status
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;やりたかったこと:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;やりたかったこと&lt;/h1&gt;

&lt;p&gt;httpdのローテーション設定を変更したかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/logrotate.d/httpd&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;週ごとのローテーション設定と、世代保存53週(1年)を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	weekly
	rotate 53
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;動作確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -dv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;vオプションで詳細を表示、個別設定ファイルの場合はメイン設定は使用されない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エラーが出ていた。remove対象のファイルがnot found。ふぁ？？？&lt;/p&gt;

&lt;p&gt;vオプションで詳細をよく確認すると、ファイル名処理を日付ではなく連番のextentionで処理しているっぽい？
現状は&lt;code&gt;/var/log/httpd&lt;/code&gt;内には日付ファイル名が存在。&lt;/p&gt;

&lt;p&gt;メイン設定ファイル内に&lt;code&gt;dateext&lt;/code&gt;という項目を発見。個別設定の方に追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	weekly
	rotate 53
	dateext
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -dv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけてるっぽいので実行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -fv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログフォルダ確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと消えてた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>マウスの強制操作</title>
      <link>https://sharkattack51.github.io/post/mouse_emulation/</link>
      <pubDate>Sun, 10 May 2015 12:06:21 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/mouse_emulation/</guid>
      <description>

&lt;p&gt;Win環境(WPF)でマウスの強制操作に関してハマった場合の対応方法。何故。&lt;/p&gt;

&lt;h1 id=&#34;方法1:046002245d2b3b653a986c98e88234bb&#34;&gt;方法1&lt;/h1&gt;

&lt;p&gt;今まではここら辺を参考にしていた。
&lt;a href=&#34;http://homepage2.nifty.com/nonnon/SoftSample/CS.NET/SampleSendInput.html&#34;&gt;http://homepage2.nifty.com/nonnon/SoftSample/CS.NET/SampleSendInput.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;user32.dllからアンマネージdll関数のSendInput()でエミュレート操作データを作って送出。実行。&lt;/p&gt;

&lt;p&gt;で、今回WPF環境で使おうとしたら動かなくて何故なのかー。&lt;/p&gt;

&lt;h1 id=&#34;方法2:046002245d2b3b653a986c98e88234bb&#34;&gt;方法2&lt;/h1&gt;

&lt;p&gt;調べた結果、こっちの方法を参考にしたらいけた。ていうかまんま。
&lt;a href=&#34;http://puarts.com/?pid=1144&#34;&gt;http://puarts.com/?pid=1144&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WPF内のSetCursorPos()とアンマネージdll関数のmouse_event()でイベント発火させると良いらしい。&lt;/p&gt;

&lt;h1 id=&#34;考察:046002245d2b3b653a986c98e88234bb&#34;&gt;考察&lt;/h1&gt;

&lt;p&gt;原因は分からん。エラーも何も出ずに全力で無視されるんだけど、フレームワーク都合の何かっぽい。
WPFが低レイヤーのどこかでイベントを上書きしてるんだろうか。
方法1はWPF環境でなければ普通はいける。UnityのC#上からとかでも問題はない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exifとの格闘の記録</title>
      <link>https://sharkattack51.github.io/post/exif/</link>
      <pubDate>Sat, 09 May 2015 13:47:36 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/exif/</guid>
      <description>

&lt;p&gt;モバイル端末で撮影した写真画像をUnityの実行時にダウンロード。
jpegの画像方向が違っていた。原因はExif。&lt;/p&gt;

&lt;h1 id=&#34;orientation:160c20f234b91182f09adf126dc2ead9&#34;&gt;Orientation&lt;/h1&gt;

&lt;p&gt;ExifのOrientation情報見てみる。
調べたらなんか情報が錯綜していたが内容としてはこれっぽい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hackmylife.net/archives/7400448.html&#34;&gt;http://hackmylife.net/archives/7400448.html&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Orientation&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;補正方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;そのまま&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;180度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;左右反転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転、時計周りに270度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時計周りに90度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転、時計周りに90度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時計周りに270度回転&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;しかし、ここらへんのExif確認ツールで見ても、ツールごとに表示が違うんだがなんなのこれ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExifRead
&lt;a href=&#34;http://freesoft-100.com/review/exif-reader.html&#34;&gt;http://freesoft-100.com/review/exif-reader.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;F6Exif
&lt;a href=&#34;http://www.vector.co.jp/soft/winnt/art/se427764.html&#34;&gt;http://www.vector.co.jp/soft/winnt/art/se427764.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ExifTool
&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/&#34;&gt;http://www.sno.phy.queensu.ca/~phil/exiftool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変に日本語化されてないし、確認はExifToolが良い気がする。&lt;/p&gt;

&lt;h1 id=&#34;exifライブラリ-c:160c20f234b91182f09adf126dc2ead9&#34;&gt;Exifライブラリ(C#)&lt;/h1&gt;

&lt;p&gt;さて、こんなのあったので自前で判定してやってみる。
&lt;a href=&#34;http://blog.ch3cooh.jp/entry/20111222/1324552051&#34;&gt;http://blog.ch3cooh.jp/entry/20111222/1324552051&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;うーなんか自前すぎるしライブラリあるんちゃうん。あった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExifLib   &lt;a href=&#34;http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET&#34;&gt;http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~~~&lt;/p&gt;

&lt;p&gt;その後、だいぶつらみがあったので途中で萎えて辞めた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 回転方向の判定 &amp;gt; できた
- 判定した方向でTexture2Dから取ったColor32配列を回転させる &amp;gt; できた
- 画像が長方形の時、回転後の配列サイズが...元のTexture2Dサイズが.. &amp;gt; 萎え
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;imagemagick:160c20f234b91182f09adf126dc2ead9&#34;&gt;ImageMagick&lt;/h1&gt;

&lt;p&gt;少し調べてImageMagickに神オプションを発見。すべてよしなにやってくれる&lt;code&gt;AutoOrient&lt;/code&gt;オプションがー。&lt;/p&gt;

&lt;p&gt;今回の案件的にはサーバーサイドで対応可能なので、そっちでやってもらうことにした。&lt;/p&gt;

&lt;h1 id=&#34;imagemagick-c-ラッパー:160c20f234b91182f09adf126dc2ead9&#34;&gt;ImageMagick C#ラッパー&lt;/h1&gt;

&lt;p&gt;ImageMagickのC#ラッパーあるっぽいし、AutoOrient()でやってくれるっぽいんでちょっとやってみる。&lt;/p&gt;

&lt;p&gt;WPFとかだったらVisualStudioでNugetできる。ていうか調べると大体System.Drawingのクラス使っててUnityのMonoではつらい印象。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick.NET   &lt;a href=&#34;https://imagemagick.codeplex.com/&#34;&gt;https://imagemagick.codeplex.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Unityからどうやって使うん？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Magick.NET    &lt;a href=&#34;https://magick.codeplex.com/&#34;&gt;https://magick.codeplex.com/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コンパイルえらーがー&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unhandled Exception: System.TypeLoadException:
Could not load type &#39;ImageMagick.MagickImage&#39; from assembly &#39;Magick.NET-x86,
Version=7.0.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec&#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DomaMagick    &lt;a href=&#34;http://magickwand.blog43.fc2.com/blog-category-25.html&#34;&gt;http://magickwand.blog43.fc2.com/blog-category-25.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今回使いたいAutoOrientがないっぽい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;結論:160c20f234b91182f09adf126dc2ead9&#34;&gt;結論&lt;/h3&gt;

&lt;p&gt;Magick.NETがいけそうだったけど、Unity(Mono)だとやりたいことができなかった。
無念感でいっぱいだが、やる方法あると思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのワークフロー</title>
      <link>https://sharkattack51.github.io/post/hugo_flow/</link>
      <pubDate>Fri, 01 May 2015 21:01:47 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/hugo_flow/</guid>
      <description>

&lt;p&gt;このサイトは&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;を使っている。そして頻繁に更新しない。
ので、新規ポストのたびに使い方調べる羽目になってつらい。ので、使い方思い出す用のメモ。&lt;/p&gt;

&lt;h1 id=&#34;ポストの新規作成:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;ポストの新規作成&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo new post/post_name.md&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;ローカルサーバーで確認:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;ローカルサーバーで確認&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo server --buildDrafts --watch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hugo server -D -w&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;パブリッシュ:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;パブリッシュ&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;デプロイ:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;デプロイ&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git push origin master&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SublimeText-OmniSharpでUnityのコード補完設定</title>
      <link>https://sharkattack51.github.io/post/sublime_unity/</link>
      <pubDate>Fri, 01 May 2015 20:35:42 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/sublime_unity/</guid>
      <description>

&lt;p&gt;幾度かの挫折の末にやっと判明した設定方法について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;その後Monodevelopとさらばしたかったが、結局なかなか離れられていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考元:bf320ad6e095134691cd2a21bde2ae24&#34;&gt;参考元&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.radjor.com/blog/p/65&#34;&gt;http://www.radjor.com/blog/p/65&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;手順:bf320ad6e095134691cd2a21bde2ae24&#34;&gt;手順&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SublimeText&lt;/code&gt;に&lt;code&gt;OmniSharp&lt;/code&gt;パッケージをインストール&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mono&lt;/code&gt;をインストール

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mono-project.com/&#34;&gt;http://www.mono-project.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityのプロジェクトディレクトリで&lt;code&gt;.sublime-project&lt;/code&gt;を保存

&lt;ul&gt;
&lt;li&gt;sublコマンドで開くとらくちん&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.sublime-project&lt;/code&gt;を編集&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;xxxxx-csharp.sln&lt;/code&gt;の設定とUnity用ファイルのプロジェクト除外設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;folders&amp;quot;:
    [
        {
            &amp;quot;follow_symlinks&amp;quot;: true,
            &amp;quot;path&amp;quot;: &amp;quot;.&amp;quot;,
            &amp;quot;file_exclude_patterns&amp;quot;:
            [
                &amp;quot;*.meta&amp;quot;,
                &amp;quot;*.csproj&amp;quot;,
                &amp;quot;*.unityproj&amp;quot;
            ],
            &amp;quot;folder_include_patterns&amp;quot;:
            [
                &amp;quot;Assets&amp;quot;,
                &amp;quot;Assets/*&amp;quot;
            ]
        }
    ],
    &amp;quot;solution_file&amp;quot;: &amp;quot;xxxxxxxx-csharp.sln&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Packages/OmniSharp/PrebuiltOmniSharpServer/config.json&lt;/code&gt;でwarningの無視設定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトでwarning出過ぎなので個人的にはまだ足りない。warningは駆逐したい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;IgnoredCodeIssues&amp;quot;:
[
    &amp;quot;^Keyword &#39;private&#39; is redundant. This is the default modifier.$&amp;quot;,
    &amp;quot;.* should not separate words with an underscore.*&amp;quot;,
    &amp;quot;^Redundant argument name specification$&amp;quot;,
    &amp;quot;^Convert to &#39;.*&#39; expre.&amp;quot;,
    &amp;quot;^Use &#39;var&#39; keyword$&amp;quot;,
    &amp;quot;^Name should have prefix.&amp;quot;,
    &amp;quot;^Redundant ToString.&amp;quot;,
    &amp;quot;^Initializing field by default value is redundant$&amp;quot;,
    &amp;quot;^Parameter can be IComparable$&amp;quot;,
    &amp;quot;^Convert to constant.*&amp;quot;,
    &amp;quot;^Variable could be moved to a nested scope$&amp;quot;,
    &amp;quot;^Method never reaches its end or a &#39;return&#39; statement.$&amp;quot;,
    &amp;quot;.* should start with an upper case letter. \\(Rule &#39;Enum Members&#39;\\)$&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>