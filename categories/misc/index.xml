<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Misc on Dokyuments</title>
    <link>https://sharkattack51.github.io/categories/misc/</link>
    <description>Recent content in Misc on Dokyuments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
    
    
    <lastBuildDate>Sat, 08 Aug 2015 20:03:20 JST</lastBuildDate>
    <atom:link href="https://sharkattack51.github.io/categories/misc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MS-OfficeファイルをIEで開く設定</title>
      <link>https://sharkattack51.github.io/post/office-in-browser/</link>
      <pubDate>Sat, 08 Aug 2015 20:03:20 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/office-in-browser/</guid>
      <description>&lt;p&gt;MS-Officeファイルを、とくにPowerPointを自前のアプリケーションで開く場合に
一番簡単な方法でIEに丸投げする方法がある。&lt;/p&gt;

&lt;p&gt;Viewer用のActiveXとか探すとあるみたいだけど、バージョンの互換で辛くなること必至なので
MSにおまかせするのが正解な気がする。&lt;/p&gt;

&lt;p&gt;IEで開ける＝WindowsFormやWPFなどのWebBrowserコントロールで開くことができるようになる。&lt;/p&gt;

&lt;p&gt;ただし、標準設定ではIE上で開くことができないのでレジストリを設定する必要がある。
あと、警告でるので無視する設定が必要。&lt;/p&gt;

&lt;p&gt;リポジトリはここ
&lt;a href=&#34;https://github.com/sharkattack51/office-in-browser-settings&#34;&gt;https://github.com/sharkattack51/office-in-browser-settings&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-reg&#34;&gt;Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.Document.8]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.RTF.8]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.Document.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Word.DocumentMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000024

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.Sheet.8]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.Sheet.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.SheetMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Excel.SheetBinaryMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:80000A00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.Show.8]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.Show.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.ShowMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.SlideShow.8]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.SlideShow.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\PowerPoint.SlideShowMacroEnabled.12]
&amp;quot;BrowserFlags&amp;quot;=dword:00000000

[HKEY_CURRENT_USER\Software\Microsoft\Windows\Shell\AttachmentExecute\{0002DF01-0000-0000-C000-000000000046}]
&amp;quot;Word.Document.8&amp;quot;=dword:00000000
&amp;quot;Word.RTF.8&amp;quot;=dword:00000000
&amp;quot;Word.Document.12&amp;quot;=dword:00000000
&amp;quot;PowerPoint.Show.8&amp;quot;=dword:00000000
&amp;quot;PowerPoint.Show.12&amp;quot;=dword:00000000
&amp;quot;PowerPoint.SlideShow.8&amp;quot;=dword:00000000
&amp;quot;PowerPoint.SlideShow.12&amp;quot;=dword:00000000
&amp;quot;Excel.Sheet.8&amp;quot;=dword:00000000
&amp;quot;Excel.Sheet.12&amp;quot;=dword:00000000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>WinIMEパネルとRemoteDesktop-Mac</title>
      <link>https://sharkattack51.github.io/post/win_ime_panel/</link>
      <pubDate>Sat, 18 Jul 2015 22:02:30 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/win_ime_panel/</guid>
      <description>

&lt;p&gt;WinのIMEパネル表示させたくないのでいつも消しているが、
MacからRemoteDesktop使っている時に&lt;code&gt;英数/かな&lt;/code&gt;の切り替えがキーボード操作で出来なくて、
このパネルが必要になって困る。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;ime_panel.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;常時これは絶対に表示したくないし、なんとか環境に依存しない方法で解決したい。
(IMEの設定いじったり、キーマップを変えたりするのはPC環境が変わった場合に面倒なのでやらない)&lt;/p&gt;

&lt;p&gt;結果、完全解決出来なかったので、着地点を設定変更までの手数を減らすということにした。&lt;/p&gt;

&lt;h3 id=&#34;通常:f0add05a456f3f2815ef00db948f079c&#34;&gt;通常&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;コンパネを開く&lt;/li&gt;
&lt;li&gt;コンパネから地域と言語を開く&lt;/li&gt;
&lt;li&gt;地域と言語からキーボードと言語タブを開く&lt;/li&gt;
&lt;li&gt;キーボードの変更ボタンを押す&lt;/li&gt;
&lt;li&gt;テキストサービスと入力言語ウィンドウを開く&lt;/li&gt;
&lt;li&gt;言語バータブを開く&lt;/li&gt;
&lt;li&gt;言語バー設定の変更&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;手数が多すぎてやばい&lt;/p&gt;

&lt;h3 id=&#34;アイディア:f0add05a456f3f2815ef00db948f079c&#34;&gt;アイディア&lt;/h3&gt;

&lt;p&gt;上記 1. 2. 3. 4. をショートカットするコマンド&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ control input.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;コントロールパネル内の設定ウィンドウを直接開く。
&lt;code&gt;.bat&lt;/code&gt;作って設定ウィンドウopenまでショートカットする。
入力を切り替えたい時に初めてパネル表示させて、要件終わったら非表示にする。&lt;/p&gt;

&lt;p&gt;あと２クリックをショートカットできたら、、、、、、、、、、、、、、&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtualbox上のCentOSのディスク容量を追加する</title>
      <link>https://sharkattack51.github.io/post/virtualbox_add_disk/</link>
      <pubDate>Thu, 02 Jul 2015 20:00:00 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/virtualbox_add_disk/</guid>
      <description>&lt;p&gt;VMで動かしていたCentOSが容量一杯になってしまったので緊急調べた。&lt;br/&gt;
基本的には下記のどっちかでなんとかなる。ほんとWeb無かったらなんも分からないです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.clock-up.jp/entry/2015/05/03/virtualbox-centos-disk-ext&#34;&gt;http://blog.clock-up.jp/entry/2015/05/03/virtualbox-centos-disk-ext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.clock-up.jp/entry/2015/05/29/virtualbox-centos-disk-vdi-ext&#34;&gt;http://blog.clock-up.jp/entry/2015/05/29/virtualbox-centos-disk-vdi-ext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;簡単なのは物理ディスクを追加するやり方。Virtualbox上から追加する。&lt;br/&gt;
追加したら&lt;code&gt;$ fdisk /dev/sda&lt;/code&gt;とか&lt;code&gt;$ fdisk /dev/sdb&lt;/code&gt;でパーティション設定してやる。&lt;/p&gt;

&lt;p&gt;ここは&lt;code&gt;m&lt;/code&gt;コマンドでヘルプを確認しながらやるべき。&lt;br/&gt;
&lt;code&gt;4&lt;/code&gt;まで使える&lt;code&gt;primaryパーティション&lt;/code&gt;を設定してやる。&lt;br/&gt;
テーブルの開始位置と終わりの位置を設定するが、基本はデフォルトでやれば追加容量分を全部使う感じ。&lt;/p&gt;

&lt;p&gt;追加できたら再起動 &lt;code&gt;$ shutdown -r now&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;その後、&lt;br/&gt;
&lt;code&gt;$ fdisk -l&lt;/code&gt;で追加したパーティションを確認する。追加できているがまだ使えない。&lt;br/&gt;
&lt;code&gt;$ pvcreate /dev/sda3&lt;/code&gt;でパーティションに物理ボリュームを作り、&lt;br/&gt;
&lt;code&gt;$ vgextend VolGroup /dev/sda3&lt;/code&gt;でボリュームグループの設定し、&lt;br/&gt;
&lt;code&gt;$ lvextend -l +100%FREE /dev/mapper/VolGroup-lv_root&lt;/code&gt;でボリューム拡張して、&lt;br/&gt;
&lt;code&gt;$ resize2fs /dev/mapper/VolGroup-lv_root&lt;/code&gt;でファイルシステムを拡張する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ df&lt;/code&gt;でディスク確認してみると拡張出来ている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReactiveProgrammingに関する参照情報</title>
      <link>https://sharkattack51.github.io/post/reactive_reference/</link>
      <pubDate>Wed, 01 Jul 2015 17:41:17 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/reactive_reference/</guid>
      <description>&lt;p&gt;まず一回ここら辺を適当に読み漁って概要をなんとなく拾う。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【翻訳】あなたが求めていたリアクティブプログラミング入門&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ninjinkun.hatenablog.com/entry/introrxja&#34;&gt;http://ninjinkun.hatenablog.com/entry/introrxja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactive Porn&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://steps.dodgson.org/b/2014/12/07/reactive-porn/&#34;&gt;http://steps.dodgson.org/b/2014/12/07/reactive-porn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なぜリアクティブプログラミングは重要か。&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://d.hatena.ne.jp/pokarim/20101226&#34;&gt;http://d.hatena.ne.jp/pokarim/20101226&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reactive Programming in Javascript&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ahomu.github.io/s/150221-frontrend_conference/#1&#34;&gt;http://ahomu.github.io/s/150221-frontrend_conference/#1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;スマートフォンアプリでリアクティブプログラミングをしているが、Promiseとデータバインディングとして使っている&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ninjinkun.hatenablog.com/entry/2015/03/21/143712&#34;&gt;http://ninjinkun.hatenablog.com/entry/2015/03/21/143712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android開発でRxJavaをチームに導入した話&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://techlife.cookpad.com/entry/2015/04/17/100000&#34;&gt;http://techlife.cookpad.com/entry/2015/04/17/100000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RxJSをもくもくしてReactivePropertyの価値らしきものを気づかされた話（仮）&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://saneyukis.hatenablog.com/entry/2015/05/12/125317&#34;&gt;http://saneyukis.hatenablog.com/entry/2015/05/12/125317&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未来のプログラミング技術をUnityで -UniRx-&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/torisoup/unity-unirx&#34;&gt;http://www.slideshare.net/torisoup/unity-unirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UniRxとカスタムバインディング&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://ykimisaki.hatenablog.jp/entry/2015/03/25/012436&#34;&gt;http://ykimisaki.hatenablog.jp/entry/2015/03/25/012436&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observable Everywhere - Rxの原則とUniRxにみるデータソースの見つけ方&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/neuecc/observable-everywhere-rxuni-rx&#34;&gt;http://www.slideshare.net/neuecc/observable-everywhere-rxuni-rx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、雰囲気を把握したらなんでも良いのでRxライブラリを一回触ってみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C# / &lt;strong&gt;ReactiveExtentions&lt;/strong&gt; &lt;a href=&#34;https://rx.codeplex.com&#34;&gt;https://rx.codeplex.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unity / &lt;strong&gt;UniRx&lt;/strong&gt; &lt;a href=&#34;https://github.com/neuecc/UniRx&#34;&gt;https://github.com/neuecc/UniRx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python / &lt;strong&gt;RxPY&lt;/strong&gt; &lt;a href=&#34;https://github.com/ReactiveX/RxPY&#34;&gt;https://github.com/ReactiveX/RxPY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AS3 / &lt;strong&gt;Raix&lt;/strong&gt; &lt;a href=&#34;https://github.com/richardszalay/raix&#34;&gt;https://github.com/richardszalay/raix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ライブラリのドキュメント読んで、触りだけでもやったらこれ読んで大体機能を把握する。神資料。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactiveExtentions入門&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/okazuki0130/reactive-extensionsv01&#34;&gt;http://www.slideshare.net/okazuki0130/reactive-extensionsv01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その後、UniRx勉強会のスライド見直してまとめ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;はじめてのUniRx&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/torisoup/uni-rx&#34;&gt;http://www.slideshare.net/torisoup/uni-rx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interactive UI with UniRx&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/yutoiwashita/reactive-ui-withunirx&#34;&gt;http://www.slideshare.net/yutoiwashita/reactive-ui-withunirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;History &amp;amp; Practices for UniRx UniRxの歴史、或いは開発(中)タイトルの用例と落とし穴の回避法&lt;/strong&gt;&lt;br/&gt;
&lt;a href=&#34;http://www.slideshare.net/neuecc/history-practices-for-unirx-unirx&#34;&gt;http://www.slideshare.net/neuecc/history-practices-for-unirx-unirx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、この後に上の方の資料を見直すと大分理解が深まる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>as3 レスポンスヘッダーが取得できない</title>
      <link>https://sharkattack51.github.io/post/as3_get_response_header/</link>
      <pubDate>Tue, 09 Jun 2015 21:36:28 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/as3_get_response_header/</guid>
      <description>&lt;p&gt;as3でサーバーからのレスポンスヘッダーを取りたかった。&lt;br/&gt;
どうやらflash上ではできないらしい。&lt;br/&gt;
マジと思って調べたらマジだった。みんなこれでやってたのか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTPStatusEvent&lt;/code&gt;クラスで取れる気がしたが、
リファレンスをよく見ると&lt;code&gt;responseHeaders&lt;/code&gt;プロパティ自体のランタイム表記にFlashPlayerが密かに無い。&lt;/p&gt;

&lt;p&gt;その後少しがんばって、こことか発見して&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.livedoor.jp/kunz/archives/51364315.html&#34;&gt;http://blog.livedoor.jp/kunz/archives/51364315.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使ったら取得できた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/wbpanda/20091007/1254931878&#34;&gt;http://d.hatena.ne.jp/wbpanda/20091007/1254931878&lt;/a&gt;
&lt;a href=&#34;https://github.com/gabriel/as3httpclient&#34;&gt;https://github.com/gabriel/as3httpclient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;と思ったらローカルサーバーだとできてて、web経由だと取得できなかった。&lt;br/&gt;
これはつまりおそらく無理でflashplayerのセキュリティポリシー的なやつかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonと連携する方法</title>
      <link>https://sharkattack51.github.io/post/cs_py/</link>
      <pubDate>Sat, 23 May 2015 11:13:29 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/cs_py/</guid>
      <description>

&lt;p&gt;Pythonライブラリの有能さを覚えると、外の言語を使っている時にPythonでサクッといきたい場面がある。
もちろん実行時の処理速度に問題がなければという前提で、非同期で処理できればメインとは別のプロセスで処理できるので受けれる恩恵は大きい。&lt;/p&gt;

&lt;p&gt;例えば画像の変換の場合は&lt;a href=&#34;http://www.pythonware.com/products/pil/&#34;&gt;PIL&lt;/a&gt;なんか使うと相当楽だし、場合によっては&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt;ラッパーが使える。(もちろんネイティブライブラリよりは遅い)&lt;br/&gt;
RSSなんかのFeedのパースなんかも&lt;a href=&#34;https://pypi.python.org/pypi/feedparser&#34;&gt;UniversalFeedParser&lt;/a&gt;が有能すぎるし、&lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt;は便利だ。&lt;/p&gt;

&lt;p&gt;例えばUnityやAIRなどの実行環境からPythonに処理を投げたい場合にどうするか。
データの受け渡しはどうするか。&lt;/p&gt;

&lt;h1 id=&#34;方法:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;方法&lt;/h1&gt;

&lt;p&gt;基本的にはイベント処理で実装したいので、Python側をローカルにアプリケーションサーバーとして立てておき、メインアプリ側からhttpリクエストを送る。&lt;/p&gt;

&lt;p&gt;できるだけシンプルに実装したいのでWebフレームワークを使ってアプリケーションサーバーを立てる。
&lt;a href=&#34;http://a2c.bitbucket.org/flask/&#34;&gt;flask&lt;/a&gt;や&lt;a href=&#34;http://bottlepy.org/docs/dev/index.html&#34;&gt;Bottle&lt;/a&gt;あたりが良いと思う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;# python

from flask import Flask

app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;, methods=[&#39;GET&#39;])
def index():
	return &amp;quot;Hello&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
	app.debug = True
	app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでルート &lt;a href=&#34;http://localhost:5000/&#34;&gt;http://localhost:5000/&lt;/a&gt; にアクセスすると結果をとってこれる。
あとはhttpリクエストで非同期処理してメインアプリ側でイベント処理する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C# Python側からテキストを受け取る

IEnumerator Start()
{
	WWW www = new WWW(&amp;quot;http://localhost:5000/&amp;quot;);

	yield return www;

	Debug.log(www.text) //Hello
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数が欲しい場合は、クエリやRESTのAPIを生やして対応できるし、
画像の受け渡しが必要な場合はbyte配列にした上でformでやり取りする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C#

IEnumerator Start()
{
	WWWForm form = new WWWForm();
	form.AddBinaryData(&amp;quot;post_data&amp;quot;, texture.EncodeToPNG(), texture.name, &amp;quot;image/png&amp;quot;);
	WWW www = new WWW(&amp;quot;http://localhost:5000/test_api&amp;quot;, form);

	yield return www;

	processedTex = www.texture;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# python PILを使った画像処理結果をC#側に返す

@app.route(&amp;quot;/test_api&amp;quot;, methods=[&amp;quot;POST&amp;quot;])
def test():
	if request.method == &amp;quot;POST&amp;quot;:

		# formデータの受け取り
		image_bytes = request.files[&amp;quot;post_data&amp;quot;]

		# IOオブジェクトでbyteデータをImageに読み込む
		image = Image.open(StringIO(image_bytes.read()))
		
		# imageに対して加工処理
		# ...
		
		# 更新をbufferにpngで保存
		buf = StringIO()
		image.save(buf, &amp;quot;png&amp;quot;)

		# bufferからレスポンス作成
		response = make_response(buf.getvalue())
		response.headers[&amp;quot;Content-type&amp;quot;] = &amp;quot;Image&amp;quot;
		return response
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;アプリケーションの実装はこまごました部分をスクリプト側に委譲していく設計もありだと思う。&lt;br/&gt;
俗にいう&lt;a href=&#34;http://deeeet.com/writing/2014/09/10/microservices/&#34;&gt;Microservices&lt;/a&gt;の一つではないか。&lt;/p&gt;

&lt;p&gt;ちなみにUnityであればこういう手もある。&lt;br/&gt;
&lt;a href=&#34;http://tkitao.hatenablog.com/entry/2015/05/18/225902&#34;&gt;Unity上でPythonを使う①【アセット組み込み編】 - kitao&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>logrotate</title>
      <link>https://sharkattack51.github.io/post/logrotate/</link>
      <pubDate>Thu, 14 May 2015 22:11:58 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/logrotate/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install logrotate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;logrotate&lt;/code&gt;はデーモンではないので&lt;code&gt;crond&lt;/code&gt;によって実行される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/cron.daily/logrotate&lt;/code&gt;により
メイン設定ファイルの&lt;code&gt;/etc/logrotate.conf&lt;/code&gt;が読み込まれる。&lt;/p&gt;

&lt;p&gt;メイン設定ファイル内のincludeにより
個別設定ファイルの&lt;code&gt;/etc/logrotate.d/&lt;/code&gt;以下が読み込まれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/logrotate.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;サービスごとの設定ファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/logrotate.d/xxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;こちらが優先される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ローテーション確認:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;ローテーション確認&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -d /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;強制実行:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;強制実行&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -f /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;実行履歴確認:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;実行履歴確認&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /var/lib/logrotate.status
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;やりたかったこと:abb55c6d0cc5bd0def4c646d24a6d399&#34;&gt;やりたかったこと&lt;/h1&gt;

&lt;p&gt;httpdのローテーション設定を変更したかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/logrotate.d/httpd&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;週ごとのローテーション設定と、世代保存53週(1年)を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	weekly
	rotate 53
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;動作確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -dv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;vオプションで詳細を表示、個別設定ファイルの場合はメイン設定は使用されない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エラーが出ていた。remove対象のファイルがnot found。ふぁ？？？&lt;/p&gt;

&lt;p&gt;vオプションで詳細をよく確認すると、ファイル名処理を日付ではなく連番のextentionで処理しているっぽい？
現状は&lt;code&gt;/var/log/httpd&lt;/code&gt;内には日付ファイル名が存在。&lt;/p&gt;

&lt;p&gt;メイン設定ファイル内に&lt;code&gt;dateext&lt;/code&gt;という項目を発見。個別設定の方に追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/var/log/httpd/*log {
	weekly
	rotate 53
	dateext
	missingok
	notifempty
	sharedscripts
	delaycompress
	postrotate
		/sbin/service httpd reload &amp;gt; /dev/null 2&amp;gt;/dev/null || true
	endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -dv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけてるっぽいので実行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ logrotate -fv /etc/logrotate.d/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログフォルダ確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと消えてた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>マウスの強制操作</title>
      <link>https://sharkattack51.github.io/post/mouse_emulation/</link>
      <pubDate>Sun, 10 May 2015 12:06:21 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/mouse_emulation/</guid>
      <description>

&lt;p&gt;Win環境(WPF)でマウスの強制操作に関してハマった場合の対応方法。何故。&lt;/p&gt;

&lt;h1 id=&#34;方法1:046002245d2b3b653a986c98e88234bb&#34;&gt;方法1&lt;/h1&gt;

&lt;p&gt;今まではここら辺を参考にしていた。
&lt;a href=&#34;http://homepage2.nifty.com/nonnon/SoftSample/CS.NET/SampleSendInput.html&#34;&gt;http://homepage2.nifty.com/nonnon/SoftSample/CS.NET/SampleSendInput.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;user32.dllからアンマネージdll関数のSendInput()でエミュレート操作データを作って送出。実行。&lt;/p&gt;

&lt;p&gt;で、今回WPF環境で使おうとしたら動かなくて何故なのかー。&lt;/p&gt;

&lt;h1 id=&#34;方法2:046002245d2b3b653a986c98e88234bb&#34;&gt;方法2&lt;/h1&gt;

&lt;p&gt;調べた結果、こっちの方法を参考にしたらいけた。ていうかまんま。
&lt;a href=&#34;http://puarts.com/?pid=1144&#34;&gt;http://puarts.com/?pid=1144&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WPF内のSetCursorPos()とアンマネージdll関数のmouse_event()でイベント発火させると良いらしい。&lt;/p&gt;

&lt;h1 id=&#34;考察:046002245d2b3b653a986c98e88234bb&#34;&gt;考察&lt;/h1&gt;

&lt;p&gt;原因は分からん。エラーも何も出ずに全力で無視されるんだけど、フレームワーク都合の何かっぽい。
WPFが低レイヤーのどこかでイベントを上書きしてるんだろうか。
方法1はWPF環境でなければ普通はいける。UnityのC#上からとかでも問題はない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのワークフロー</title>
      <link>https://sharkattack51.github.io/post/hugo_flow/</link>
      <pubDate>Fri, 01 May 2015 21:01:47 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/hugo_flow/</guid>
      <description>

&lt;p&gt;このサイトは&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;を使っている。そして頻繁に更新しない。
ので、新規ポストのたびに使い方調べる羽目になってつらい。ので、使い方思い出す用のメモ。&lt;/p&gt;

&lt;h1 id=&#34;ポストの新規作成:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;ポストの新規作成&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo new post/post_name.md&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;ローカルサーバーで確認:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;ローカルサーバーで確認&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo server --buildDrafts --watch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hugo server -D -w&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;パブリッシュ:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;パブリッシュ&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ hugo&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;デプロイ:a4ef5acb253fb526eeee44a0fb0c18e4&#34;&gt;デプロイ&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git push origin master&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOSでSSLサーバー(OTAインストール用)を立てたいレシピ</title>
      <link>https://sharkattack51.github.io/post/centos_ssl_server_recipe/</link>
      <pubDate>Fri, 20 Mar 2015 21:51:33 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/centos_ssl_server_recipe/</guid>
      <description>

&lt;h1 id=&#34;virtualboxに新規vm作成:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;VirtualBoxに新規VM作成&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vagrantが楽&lt;/li&gt;
&lt;li&gt;じゃなければ

&lt;ul&gt;
&lt;li&gt;CentOS 64bit&lt;/li&gt;
&lt;li&gt;基本デフォルト設定でおk&lt;/li&gt;
&lt;li&gt;インストールドライブにインストーラーイメージを設定する&lt;/li&gt;
&lt;li&gt;内部ネットワーク設定

&lt;ul&gt;
&lt;li&gt;割り当て : ブリッジアダプター&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;サーバー設定:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;サーバー設定&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ネットワーク設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ emacs /etc/sysconfig/network-scripts/ifcfg-eth0


ONBOOT=yes
NM_CONTROLLED=no


$ service network restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;openssh インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install openssh openssh-server openssh-clients
$ service sshd start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降はSSHにて作業&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nginx インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
$ yum install nginx
$ service nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;php-fpm インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install php-fpm
$ emacs /etc/php-fpm.d/www.conf


user = nginx
group = nginx


$ service php-fpm start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Boot設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ chkconfig iptables off
$ chkconfig nginx on
$ chkconfig php-fpm on
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;サーバー証明書作成:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;サーバー証明書作成&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~
$ openssl genrsa 2048 &amp;gt; cert.key
$ openssl req -new -x509 -days 3650 -key cert.key -out cert.crt -subj &#39;/CN=XXXXXXXX&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;iPhone構成ユーティリティから&lt;code&gt;.mobileconfig&lt;/code&gt;の生成

&lt;ul&gt;
&lt;li&gt;構成プロファイル &amp;gt; 新規作成 &amp;gt; 資格情報にcrtの登録 &amp;gt; 書き出し

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cert.crt&lt;/code&gt;をインポート&lt;/li&gt;
&lt;li&gt;プロファイル表示名を設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cert.mobileconfig&lt;/code&gt;を書き出し&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;nginx設定を変更:044c6e2ffdcdfcd556eea0e367a03f2a&#34;&gt;nginx設定を変更&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;https設定として証明書を指定、phpの動作を有効化する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /etc/nginx/conf.d
$ mv default.conf default.conf.bak
$ emacs example_ssl.conf


server {
    listen        80;
    listen        443 ssl;
    server_name   XXXXXXXX;


    ssl_certificate       /XXX/cert.crt;
    ssl_certificate_key   /XXX/cert.key;


    ssl_session_cache     shared:SSL:1m;
    ssl_session_timeout   5m;


    ssl_ciphers                 HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers   on;


    location / {
        root    /usr/share/nginx/html;
        index   index.html index.htm index.php;
    }


    location ~ \.php$ {
        root           /usr/share/nginx/html;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
        include        fastcgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定ファイルのテスト&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ service nginx configtest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定ファイルの更新反映&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ service nginx reload
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>KINECT v2</title>
      <link>https://sharkattack51.github.io/post/kinect2/</link>
      <pubDate>Tue, 03 Feb 2015 22:12:59 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/kinect2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.microsoftstore.com/store/msjp/ja_JP/pdp/productID.298959900&#34;&gt;MicrosoftStoreJapan オンラインストア&lt;/a&gt;
¥21,578 (税込)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今後はXboxOne用+Windows用アダプタになる模様&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;動作環境:56dfcf25620037a9b9098a7284b1203a&#34;&gt;動作環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Windows 8.1&lt;/li&gt;
&lt;li&gt;64ビット、デュアルコア 2.66GHz以上&lt;/li&gt;
&lt;li&gt;メモリ2GB以上&lt;/li&gt;
&lt;li&gt;DirectX11&lt;/li&gt;
&lt;li&gt;USB 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;kinect-v1-とのスペック比較:56dfcf25620037a9b9098a7284b1203a&#34;&gt;Kinect(v1)とのスペック比較&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;機能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Kinect v1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Kinect v2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Color画像&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;640×480 30fps&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1920×1080 30fps&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Depth（深度）画像&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;320×240&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;512×424&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;最大距離&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5m&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5m&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;最少距離&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;40cm（Near Mode)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;50cm&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;水平視野角&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;57度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;70度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;垂直視野角&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;43度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;60度&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;チルトモーター&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有り コントロール可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無し　コントロール不可&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;骨格定義数&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;20関節/1人&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;25関節/1人&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;最大追跡対象スケルトン&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2人&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6人&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;手指の検出&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;親指と指先&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;手のポーズ検出&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;グーとパーのみ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;グー、チョキ、パー&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;音声入力&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;あり&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;あり&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;距離測定のセンシング方式が変更になった

&lt;ul&gt;
&lt;li&gt;v1では赤外線ライトパターンを測定する方式だったが、v2では赤外線反射時間を測定するTimeOfFlight方式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;チルトモーターの廃止によってプログラムからの本体角度調整が行えなくなった

&lt;ul&gt;
&lt;li&gt;手動にて角度調整を行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;構成:56dfcf25620037a9b9098a7284b1203a&#34;&gt;構成&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KinectMonitor&lt;/code&gt;によりWindowsサービスとして実行されるようになった

&lt;ul&gt;
&lt;li&gt;複数アプリケーションが同時に接続使用可能になった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;コードサンプル:56dfcf25620037a9b9098a7284b1203a&#34;&gt;コードサンプル&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;void Start()
{
  KinectSensor kinect = KinectSensor.GetDefault();
  BodyFrameReader reader = kinect.BodyFrameSource.OpenReader();
}

void Update()
{
  BodyFrame frame = reader.AcquireLatestFrame();
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;取得データ:56dfcf25620037a9b9098a7284b1203a&#34;&gt;取得データ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Color画像

&lt;ul&gt;
&lt;li&gt;カメラ画角が広くなり、解像度が1920x1080に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Depth画像

&lt;ul&gt;
&lt;li&gt;カメラ画角が広くなり、解像度が512x424に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スケルトントラッキング情報

&lt;ul&gt;
&lt;li&gt;最大人数が2人から6人に変更&lt;/li&gt;
&lt;li&gt;トラッキング部位も20箇所から25箇所に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;手の開閉

&lt;ul&gt;
&lt;li&gt;最大2人まで3種類の認識が可能

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Closed&lt;/code&gt; グー（握っている）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lasso&lt;/code&gt; チョキ（全部の指が開いていない）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Open&lt;/code&gt; パー（全部の指が開いている）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;顔認識

&lt;ul&gt;
&lt;li&gt;顔の３次元位置&lt;/li&gt;
&lt;li&gt;表情パターン&lt;/li&gt;
&lt;li&gt;左右目の開閉&lt;/li&gt;
&lt;li&gt;口の開閉&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;その他:56dfcf25620037a9b9098a7284b1203a&#34;&gt;その他&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Gesture Builder

&lt;ul&gt;
&lt;li&gt;機械学習によるジェスチャ定義をサポートするアプリケーション（現状ベータ版）が標準インストールされる。

&lt;ul&gt;
&lt;li&gt;まだベータ段階のようで、使用方法や情報があまり見つからなかった。かなり有用な気がする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;開発環境:56dfcf25620037a9b9098a7284b1203a&#34;&gt;開発環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio 2012、または、Visual Studio 2013（無料のExpress可）&lt;/li&gt;
&lt;li&gt;Unity Pro

&lt;ul&gt;
&lt;li&gt;Microsoft公式Unityアセット
&lt;a href=&#34;http://download.microsoft.com/download/0/D/6/0D63A520-05FE-4054-9B5C-DDFE1D141681/KinectForWindows_UnityPro_PublicPreview_1409.zip&#34;&gt;Kinect for Windows SDK 2.0 Unity Pro Add-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unityアセットストア内の有料アセット(v1,v2両対応)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MQTT</title>
      <link>https://sharkattack51.github.io/post/mqtt/</link>
      <pubDate>Sat, 10 Jan 2015 21:36:30 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/mqtt/</guid>
      <description>

&lt;h1 id=&#34;mqttとは:4ac81870a274ec69df24400555a4c924&#34;&gt;MQTTとは？&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;インターネット上での双方向、1対多の通信が可能な通信プロトコル。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;M2M、IoTでの利用を前提とした軽量メッセージングのための技術仕様。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MQTTでは双方向、1対多の通信が可能なので、複数クライアントに対して一方的にデータを送れる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;push型の通知が可能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mqttブローカーサービス:4ac81870a274ec69df24400555a4c924&#34;&gt;MQTTブローカーサービス&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sango.shiguredo.jp/&#34;&gt;https://sango.shiguredo.jp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;接続シーケンス:4ac81870a274ec69df24400555a4c924&#34;&gt;接続シーケンス&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;アプリ、またはブラウザからサーバーへ接続

&lt;ul&gt;
&lt;li&gt;クライアントは閉じられるまで接続を継続する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;受信側は特定のチャンネルを常に受信

&lt;ul&gt;
&lt;li&gt;チャンネルは任意に無制限に設定可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;送信側は接続されている受信者に対して一斉送信（ブロードキャスト）する

&lt;ul&gt;
&lt;li&gt;ただし端末特定はできない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;library:4ac81870a274ec69df24400555a4c924&#34;&gt;Library&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iOS

&lt;ul&gt;
&lt;li&gt;MQTTKit

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmesnil/MQTTKit&#34;&gt;https://github.com/jmesnil/MQTTKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python

&lt;ul&gt;
&lt;li&gt;paho-mqtt&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://achiku.github.io/2014/08/29/mqtt-sango.html&#34;&gt;http://achiku.github.io/2014/08/29/mqtt-sango.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>