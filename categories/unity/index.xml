<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Dokyuments</title>
    <link>https://sharkattack51.github.io/categories/unity/</link>
    <description>Recent content in Unity on Dokyuments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
    
    
    <lastBuildDate>Fri, 31 Jul 2015 19:12:20 JST</lastBuildDate>
    <atom:link href="https://sharkattack51.github.io/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OSC for Unity</title>
      <link>https://sharkattack51.github.io/post/osc/</link>
      <pubDate>Fri, 31 Jul 2015 19:12:20 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/osc/</guid>
      <description>

&lt;p&gt;ちょっと使う機会が出来たらそのうち触っておこうと思っていたOSC周りのライブラリをいろいろ漁ってみていた。
今回、正確にはTUIOを使う要件だったが、良い機会だったので下レイヤーで動いてるOSCを理解しておこうと思った。&lt;/p&gt;

&lt;h2 id=&#34;osc-tuio:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OSC/TUIO&lt;/h2&gt;

&lt;h4 id=&#34;opensound-control-osc:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OpenSound Control (OSC)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/OpenSound_Control&#34;&gt;https://ja.wikipedia.org/wiki/OpenSound_Control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSCはUDP通信上のフォーマット仕様。TUIOはさらにOSCを利用してタッチ入力用に取り決められた標準仕様という理解。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ちなみにWindowsタッチイベントはハードウェアベンダー以外の開発者が、自由にタッチイベントを発行できなかったと思うので、そんな場合もTUIOが有効。
マルチプラットフォーム対応のタッチ開発環境には同じ仕組みで対応できるのでそちらでも有用。
最近ではTouchScriptが全方位カバーされているのでおすすめ。
&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/7394&#34;&gt;https://www.assetstore.unity3d.com/jp/#!/content/7394&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UDPを使ったソケット通信自体は過去何度も経験があったけど、
バイナリデータでやり取りしてたり、パースを毎回自前でやってたりして大分不毛だった。
3つの違う言語で同じバイナリパース処理を書いたことある。&lt;/p&gt;

&lt;h2 id=&#34;メリットとか特徴とか:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;メリットとか特徴とか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;言語ごとにライブラリが存在するので通信処理とデータ解析処理を自前でやらなくて良い&lt;/li&gt;
&lt;li&gt;値にアクセスするためのURIっぽい構造化されたOSCアドレスが素敵&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;oscライブラリ:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;OSCライブラリ&lt;/h2&gt;

&lt;p&gt;OSCのライブラリをいろいろ調べていてどれもいまいち使いにくい印象だった。
どのライブラリも受信データの分解まではやってくれるけど、受信データにもっと直ぐに、もっと簡単に、アクセスしたかった。あと汎用的に。&lt;/p&gt;

&lt;p&gt;その中でこれが良い気がした。OSCアドレス指定で受信毎のコールバックが設定できる。&lt;/p&gt;

&lt;h4 id=&#34;rug-osc:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;Rug.Osc&lt;/h4&gt;

&lt;p&gt;Simple, complete, open source OSC implementation for .NET and Mono.
&lt;a href=&#34;https://bitbucket.org/rugcode/rug.osc/overview&#34;&gt;https://bitbucket.org/rugcode/rug.osc/overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その上で、もうすこしUnityフレンドリーな感じで受信側のラッパークラス書いた。&lt;/p&gt;

&lt;h4 id=&#34;unity-oscreceivecontroller:3f9c07b85f04e1e0f54f7c02256b1a87&#34;&gt;Unity-OscReceiveController&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sharkattack51/Unity-OscReceiveController&#34;&gt;https://github.com/sharkattack51/Unity-OscReceiveController&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;受信の値をインスペクタで確認できるようにpublic変数でやってる。
ソースファイルを増やしたくないのでインスペクタ拡張のEditorスクリプトはわりかし作らない主義です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pythonと連携する方法</title>
      <link>https://sharkattack51.github.io/post/cs_py/</link>
      <pubDate>Sat, 23 May 2015 11:13:29 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/cs_py/</guid>
      <description>

&lt;p&gt;Pythonライブラリの有能さを覚えると、外の言語を使っている時にPythonでサクッといきたい場面がある。
もちろん実行時の処理速度に問題がなければという前提で、非同期で処理できればメインとは別のプロセスで処理できるので受けれる恩恵は大きい。&lt;/p&gt;

&lt;p&gt;例えば画像の変換の場合は&lt;a href=&#34;http://www.pythonware.com/products/pil/&#34;&gt;PIL&lt;/a&gt;なんか使うと相当楽だし、場合によっては&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt;ラッパーが使える。(もちろんネイティブライブラリよりは遅い)&lt;br/&gt;
RSSなんかのFeedのパースなんかも&lt;a href=&#34;https://pypi.python.org/pypi/feedparser&#34;&gt;UniversalFeedParser&lt;/a&gt;が有能すぎるし、&lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt;は便利だ。&lt;/p&gt;

&lt;p&gt;例えばUnityやAIRなどの実行環境からPythonに処理を投げたい場合にどうするか。
データの受け渡しはどうするか。&lt;/p&gt;

&lt;h1 id=&#34;方法:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;方法&lt;/h1&gt;

&lt;p&gt;基本的にはイベント処理で実装したいので、Python側をローカルにアプリケーションサーバーとして立てておき、メインアプリ側からhttpリクエストを送る。&lt;/p&gt;

&lt;p&gt;できるだけシンプルに実装したいのでWebフレームワークを使ってアプリケーションサーバーを立てる。
&lt;a href=&#34;http://a2c.bitbucket.org/flask/&#34;&gt;flask&lt;/a&gt;や&lt;a href=&#34;http://bottlepy.org/docs/dev/index.html&#34;&gt;Bottle&lt;/a&gt;あたりが良いと思う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;# python

from flask import Flask

app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;, methods=[&#39;GET&#39;])
def index():
	return &amp;quot;Hello&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
	app.debug = True
	app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでルート &lt;a href=&#34;http://localhost:5000/&#34;&gt;http://localhost:5000/&lt;/a&gt; にアクセスすると結果をとってこれる。
あとはhttpリクエストで非同期処理してメインアプリ側でイベント処理する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C# Python側からテキストを受け取る

IEnumerator Start()
{
	WWW www = new WWW(&amp;quot;http://localhost:5000/&amp;quot;);

	yield return www;

	Debug.log(www.text) //Hello
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数が欲しい場合は、クエリやRESTのAPIを生やして対応できるし、
画像の受け渡しが必要な場合はbyte配列にした上でformでやり取りする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Unity-C#

IEnumerator Start()
{
	WWWForm form = new WWWForm();
	form.AddBinaryData(&amp;quot;post_data&amp;quot;, texture.EncodeToPNG(), texture.name, &amp;quot;image/png&amp;quot;);
	WWW www = new WWW(&amp;quot;http://localhost:5000/test_api&amp;quot;, form);

	yield return www;

	processedTex = www.texture;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# python PILを使った画像処理結果をC#側に返す

@app.route(&amp;quot;/test_api&amp;quot;, methods=[&amp;quot;POST&amp;quot;])
def test():
	if request.method == &amp;quot;POST&amp;quot;:

		# formデータの受け取り
		image_bytes = request.files[&amp;quot;post_data&amp;quot;]

		# IOオブジェクトでbyteデータをImageに読み込む
		image = Image.open(StringIO(image_bytes.read()))
		
		# imageに対して加工処理
		# ...
		
		# 更新をbufferにpngで保存
		buf = StringIO()
		image.save(buf, &amp;quot;png&amp;quot;)

		# bufferからレスポンス作成
		response = make_response(buf.getvalue())
		response.headers[&amp;quot;Content-type&amp;quot;] = &amp;quot;Image&amp;quot;
		return response
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:67998c0bf2f1c2d4ed60ea56f653060e&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;アプリケーションの実装はこまごました部分をスクリプト側に委譲していく設計もありだと思う。&lt;br/&gt;
俗にいう&lt;a href=&#34;http://deeeet.com/writing/2014/09/10/microservices/&#34;&gt;Microservices&lt;/a&gt;の一つではないか。&lt;/p&gt;

&lt;p&gt;ちなみにUnityであればこういう手もある。&lt;br/&gt;
&lt;a href=&#34;http://tkitao.hatenablog.com/entry/2015/05/18/225902&#34;&gt;Unity上でPythonを使う①【アセット組み込み編】 - kitao&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exifとの格闘の記録</title>
      <link>https://sharkattack51.github.io/post/exif/</link>
      <pubDate>Sat, 09 May 2015 13:47:36 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/exif/</guid>
      <description>

&lt;p&gt;モバイル端末で撮影した写真画像をUnityの実行時にダウンロード。
jpegの画像方向が違っていた。原因はExif。&lt;/p&gt;

&lt;h1 id=&#34;orientation:160c20f234b91182f09adf126dc2ead9&#34;&gt;Orientation&lt;/h1&gt;

&lt;p&gt;ExifのOrientation情報見てみる。
調べたらなんか情報が錯綜していたが内容としてはこれっぽい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hackmylife.net/archives/7400448.html&#34;&gt;http://hackmylife.net/archives/7400448.html&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Orientation&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;補正方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;そのまま&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;180度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;左右反転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転、時計周りに270度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時計周りに90度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上下反転、時計周りに90度回転&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;時計周りに270度回転&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;しかし、ここらへんのExif確認ツールで見ても、ツールごとに表示が違うんだがなんなのこれ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExifRead
&lt;a href=&#34;http://freesoft-100.com/review/exif-reader.html&#34;&gt;http://freesoft-100.com/review/exif-reader.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;F6Exif
&lt;a href=&#34;http://www.vector.co.jp/soft/winnt/art/se427764.html&#34;&gt;http://www.vector.co.jp/soft/winnt/art/se427764.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ExifTool
&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/&#34;&gt;http://www.sno.phy.queensu.ca/~phil/exiftool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変に日本語化されてないし、確認はExifToolが良い気がする。&lt;/p&gt;

&lt;h1 id=&#34;exifライブラリ-c:160c20f234b91182f09adf126dc2ead9&#34;&gt;Exifライブラリ(C#)&lt;/h1&gt;

&lt;p&gt;さて、こんなのあったので自前で判定してやってみる。
&lt;a href=&#34;http://blog.ch3cooh.jp/entry/20111222/1324552051&#34;&gt;http://blog.ch3cooh.jp/entry/20111222/1324552051&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;うーなんか自前すぎるしライブラリあるんちゃうん。あった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExifLib   &lt;a href=&#34;http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET&#34;&gt;http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~~~&lt;/p&gt;

&lt;p&gt;その後、だいぶつらみがあったので途中で萎えて辞めた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 回転方向の判定 &amp;gt; できた
- 判定した方向でTexture2Dから取ったColor32配列を回転させる &amp;gt; できた
- 画像が長方形の時、回転後の配列サイズが...元のTexture2Dサイズが.. &amp;gt; 萎え
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;imagemagick:160c20f234b91182f09adf126dc2ead9&#34;&gt;ImageMagick&lt;/h1&gt;

&lt;p&gt;少し調べてImageMagickに神オプションを発見。すべてよしなにやってくれる&lt;code&gt;AutoOrient&lt;/code&gt;オプションがー。&lt;/p&gt;

&lt;p&gt;今回の案件的にはサーバーサイドで対応可能なので、そっちでやってもらうことにした。&lt;/p&gt;

&lt;h1 id=&#34;imagemagick-c-ラッパー:160c20f234b91182f09adf126dc2ead9&#34;&gt;ImageMagick C#ラッパー&lt;/h1&gt;

&lt;p&gt;ImageMagickのC#ラッパーあるっぽいし、AutoOrient()でやってくれるっぽいんでちょっとやってみる。&lt;/p&gt;

&lt;p&gt;WPFとかだったらVisualStudioでNugetできる。ていうか調べると大体System.Drawingのクラス使っててUnityのMonoではつらい印象。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick.NET   &lt;a href=&#34;https://imagemagick.codeplex.com/&#34;&gt;https://imagemagick.codeplex.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Unityからどうやって使うん？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Magick.NET    &lt;a href=&#34;https://magick.codeplex.com/&#34;&gt;https://magick.codeplex.com/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コンパイルえらーがー&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unhandled Exception: System.TypeLoadException:
Could not load type &#39;ImageMagick.MagickImage&#39; from assembly &#39;Magick.NET-x86,
Version=7.0.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec&#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DomaMagick    &lt;a href=&#34;http://magickwand.blog43.fc2.com/blog-category-25.html&#34;&gt;http://magickwand.blog43.fc2.com/blog-category-25.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今回使いたいAutoOrientがないっぽい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;結論:160c20f234b91182f09adf126dc2ead9&#34;&gt;結論&lt;/h3&gt;

&lt;p&gt;Magick.NETがいけそうだったけど、Unity(Mono)だとやりたいことができなかった。
無念感でいっぱいだが、やる方法あると思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SublimeText-OmniSharpでUnityのコード補完設定</title>
      <link>https://sharkattack51.github.io/post/sublime_unity/</link>
      <pubDate>Fri, 01 May 2015 20:35:42 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/sublime_unity/</guid>
      <description>

&lt;p&gt;幾度かの挫折の末にやっと判明した設定方法について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;その後Monodevelopとさらばしたかったが、結局なかなか離れられていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考元:bf320ad6e095134691cd2a21bde2ae24&#34;&gt;参考元&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.radjor.com/blog/p/65&#34;&gt;http://www.radjor.com/blog/p/65&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;手順:bf320ad6e095134691cd2a21bde2ae24&#34;&gt;手順&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SublimeText&lt;/code&gt;に&lt;code&gt;OmniSharp&lt;/code&gt;パッケージをインストール&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mono&lt;/code&gt;をインストール

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mono-project.com/&#34;&gt;http://www.mono-project.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityのプロジェクトディレクトリで&lt;code&gt;.sublime-project&lt;/code&gt;を保存

&lt;ul&gt;
&lt;li&gt;sublコマンドで開くとらくちん&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;.sublime-project&lt;/code&gt;を編集&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;xxxxx-csharp.sln&lt;/code&gt;の設定とUnity用ファイルのプロジェクト除外設定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;folders&amp;quot;:
    [
        {
            &amp;quot;follow_symlinks&amp;quot;: true,
            &amp;quot;path&amp;quot;: &amp;quot;.&amp;quot;,
            &amp;quot;file_exclude_patterns&amp;quot;:
            [
                &amp;quot;*.meta&amp;quot;,
                &amp;quot;*.csproj&amp;quot;,
                &amp;quot;*.unityproj&amp;quot;
            ],
            &amp;quot;folder_include_patterns&amp;quot;:
            [
                &amp;quot;Assets&amp;quot;,
                &amp;quot;Assets/*&amp;quot;
            ]
        }
    ],
    &amp;quot;solution_file&amp;quot;: &amp;quot;xxxxxxxx-csharp.sln&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Packages/OmniSharp/PrebuiltOmniSharpServer/config.json&lt;/code&gt;でwarningの無視設定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デフォルトでwarning出過ぎなので個人的にはまだ足りない。warningは駆逐したい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;IgnoredCodeIssues&amp;quot;:
[
    &amp;quot;^Keyword &#39;private&#39; is redundant. This is the default modifier.$&amp;quot;,
    &amp;quot;.* should not separate words with an underscore.*&amp;quot;,
    &amp;quot;^Redundant argument name specification$&amp;quot;,
    &amp;quot;^Convert to &#39;.*&#39; expre.&amp;quot;,
    &amp;quot;^Use &#39;var&#39; keyword$&amp;quot;,
    &amp;quot;^Name should have prefix.&amp;quot;,
    &amp;quot;^Redundant ToString.&amp;quot;,
    &amp;quot;^Initializing field by default value is redundant$&amp;quot;,
    &amp;quot;^Parameter can be IComparable$&amp;quot;,
    &amp;quot;^Convert to constant.*&amp;quot;,
    &amp;quot;^Variable could be moved to a nested scope$&amp;quot;,
    &amp;quot;^Method never reaches its end or a &#39;return&#39; statement.$&amp;quot;,
    &amp;quot;.* should start with an upper case letter. \\(Rule &#39;Enum Members&#39;\\)$&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Unity AVProWindowsMediaプラグインでスムーズな動画再生を行う</title>
      <link>https://sharkattack51.github.io/post/avpro_windows_media/</link>
      <pubDate>Sat, 21 Mar 2015 20:57:00 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/avpro_windows_media/</guid>
      <description>

&lt;p&gt;実はWMV再生が遅かったので（再生時デコードに時間がかかり、解像度が大きい映像データだとカクつく）
その対応方法について&lt;/p&gt;

&lt;h1 id=&#34;ハードウェアで対応:0c800cade67495a7e4307e6494708031&#34;&gt;ハードウェアで対応&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;GPU,CPUは速いのが良い&lt;/li&gt;
&lt;li&gt;SSDが良い&lt;/li&gt;
&lt;li&gt;AVProWindowsMediaプラグイン自体は64bit対応されているので64bitビルドがお勧め

&lt;ul&gt;
&lt;li&gt;Unity4はEditorが32bitなので環境違いに注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;colourformatで対応:0c800cade67495a7e4307e6494708031&#34;&gt;ColourFormatで対応&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;速い

&lt;ul&gt;
&lt;li&gt;YCbCr_HD (default)&lt;/li&gt;
&lt;li&gt;YCbCr_SD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;遅い

&lt;ul&gt;
&lt;li&gt;RGBA32&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;解像度で対応:0c800cade67495a7e4307e6494708031&#34;&gt;解像度で対応&lt;/h1&gt;

&lt;p&gt;速↑&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;幅、高さともに2乗 (eg 256, 512, 1024, 2048, 4096)&lt;/li&gt;
&lt;li&gt;幅のみ2乗&lt;/li&gt;
&lt;li&gt;幅、高さともに16の倍数&lt;/li&gt;
&lt;li&gt;幅のみ16の倍数&lt;/li&gt;
&lt;li&gt;幅、高さともに4の倍数&lt;/li&gt;
&lt;li&gt;幅のみ4の倍数&lt;/li&gt;
&lt;li&gt;幅、高さともに上記に当てはまらない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;遅↓&lt;/p&gt;

&lt;h1 id=&#34;codecで対応:0c800cade67495a7e4307e6494708031&#34;&gt;Codecで対応&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.avi&lt;/code&gt;を使用する&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp4&lt;/code&gt;は大きな解像度には向いていない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hap&lt;/code&gt; が推奨。または&lt;code&gt;Xvid&lt;/code&gt;。

&lt;ul&gt;
&lt;li&gt;CPUリソースとデコード速度のバランスが良い(最適なのはHap)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DirectShowは1080pix以上の&lt;code&gt;H.264&lt;/code&gt;に対応していない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H.264&lt;/code&gt;はCPUリソースを食う&lt;/li&gt;
&lt;li&gt;非圧縮

&lt;ul&gt;
&lt;li&gt;デコード処理が無いので早い&lt;/li&gt;
&lt;li&gt;メモリ読み込みの場合にメモリオーバーになる可能性あり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.renderheads.com/portfolio/HapDirectShow/&#34;&gt;http://www.renderheads.com/portfolio/HapDirectShow/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Xvid&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xvid.com/download/&#34;&gt;https://www.xvid.com/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ffmpeg -i input.avi -b:v 50000k -c:v libxvid output.avi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;multithreadingレンダリングオプションで対応:0c800cade67495a7e4307e6494708031&#34;&gt;MultiThreadingレンダリングオプションで対応&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;UnityEditorのInspector上にて&lt;code&gt;Debug項目&lt;/code&gt;を表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTRendering設定&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;ガベージコレクションを回避:0c800cade67495a7e4307e6494708031&#34;&gt;ガベージコレクションを回避&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;明示的な呼び出しは極力避ける&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;読み込み:0c800cade67495a7e4307e6494708031&#34;&gt;読み込み&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoadMovie()&lt;/code&gt;ではなく、&lt;code&gt;LoadMovieFromMemory()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;非圧縮の場合は注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vuforia 4.0</title>
      <link>https://sharkattack51.github.io/post/vuforia4/</link>
      <pubDate>Tue, 03 Mar 2015 12:51:22 JST</pubDate>
      
      <guid>https://sharkattack51.github.io/post/vuforia4/</guid>
      <description>

&lt;h1 id=&#34;料金体系:4ec59d951bd1d25028b10bfb23a0caa6&#34;&gt;料金体系&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ライセンス有料化(クラウド、デバイス両マーカーで共通の模様)

&lt;ul&gt;
&lt;li&gt;DeveloperPotalにてアプリケーションごとにライセンス取得&lt;/li&gt;
&lt;li&gt;認識回数によるライセンス&lt;/li&gt;
&lt;li&gt;開発ライセンスはウォーターマーク入りにて月額無料&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bronze&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Silver&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Gold&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Platinum&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;月額&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$99/mo&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$399/mo&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$999/mo&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Contact Us&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;認識回数（月ごと）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;クラウド登録マーカー数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100,000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1,000,000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;企業内アプリ&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;OK&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;サポート&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Community Forums&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Community Forums&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Community Forums&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Direct&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ClassicPlan&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;1アプリ $499 初回のみ&lt;/li&gt;
&lt;li&gt;認識数無制限でのデバイスターゲット利用

&lt;ul&gt;
&lt;li&gt;フレームマーカー、イメージマーカー、シリンダー、マルチターゲット、ユーザー定義マーカー&lt;/li&gt;
&lt;li&gt;Vuforiaに直接コンタクトする

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.vuforia.com/platinum-inquiry?utm_source=exacttarget&amp;amp;utm_medium=email&#34;&gt;https://developer.vuforia.com/platinum-inquiry?utm_source=exacttarget&amp;amp;utm_medium=email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;新機能:4ec59d951bd1d25028b10bfb23a0caa6&#34;&gt;新機能&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iOS 64bit サポート&lt;/li&gt;
&lt;li&gt;オブジェクトトラッキング

&lt;ul&gt;
&lt;li&gt;事前の３Dトラッキング情報を利用する

&lt;ul&gt;
&lt;li&gt;AndroidのScannerアプリによって特徴点データ生成

&lt;ul&gt;
&lt;li&gt;トラッキング基準としてA4サイズまたはハガキサイズのマーカーを利用する&lt;/li&gt;
&lt;li&gt;撮影時、上記マーカーが撮影アングルに入るような物理的な卓上サイズでなければスキャンできない&lt;/li&gt;
&lt;li&gt;特徴的な形状または、表面模様を検出する。検出ルールはおそらく画像マーカーと同様。&lt;/li&gt;
&lt;li&gt;平坦なライティング環境が良い&lt;/li&gt;
&lt;li&gt;グレーの机が良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;たぶん下記は認識アウト

&lt;ul&gt;
&lt;li&gt;スキャン時と違いすぎる照明環境&lt;/li&gt;
&lt;li&gt;変形するもの&lt;/li&gt;
&lt;li&gt;反射するもの&lt;/li&gt;
&lt;li&gt;見上げて認識させようとする場合(スキャン時は見下げの状態なので)&lt;/li&gt;
&lt;li&gt;特徴的な凸凹が無い形状&lt;/li&gt;
&lt;li&gt;パターン的な表面&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スキャン方法

&lt;ol&gt;
&lt;li&gt;Androidのスキャナーアプリで点群データを計測

&lt;ul&gt;
&lt;li&gt;現在はDeveloperPotalから&lt;code&gt;.apk&lt;/code&gt;をダウンロードし、手動でインストール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;.odデータを書き出す

&lt;ul&gt;
&lt;li&gt;端末からメールなどを利用して送信&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DeveloperPortalでターゲットデータベースに登録

&lt;ul&gt;
&lt;li&gt;アプリケーションのライセンスに紐付け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityパッケージデータをダウンロード&lt;/li&gt;
&lt;li&gt;アプリ組み込み&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>